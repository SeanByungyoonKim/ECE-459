<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="6000" height="374" onload="init(evt)" viewBox="0 0 6000 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="6000.0" height="374.0" fill="url(#background)"  />
<text id="title" x="3000.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="357" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="5890.00" y="24" >Search</text>
<text id="matched" x="5890.00" y="357" > </text>
<g id="frames">
<g >
<title>Student::getPackagesChecksum[abi:cxx11]() (59 samples, 6.59%)</title><rect x="1386.4" y="149" width="394.2" height="15.0" fill="rgb(231,122,31)" rx="2" ry="2" />
<text  x="1389.40" y="159.5" >Student::getPackagesChecksum[abi:cxx11]()</text>
</g>
<g >
<title>std::mutex::lock() (7 samples, 0.78%)</title><rect x="1099.1" y="85" width="46.8" height="15.0" fill="rgb(206,168,45)" rx="2" ry="2" />
<text  x="1102.09" y="95.5" >std:..</text>
</g>
<g >
<title>hexCharToByte(char) (20 samples, 2.23%)</title><rect x="3344.1" y="117" width="133.6" height="15.0" fill="rgb(229,221,0)" rx="2" ry="2" />
<text  x="3347.10" y="127.5" >hexCharToByte(ch..</text>
</g>
<g >
<title>__pthread_mutex_lock (3 samples, 0.34%)</title><rect x="1332.9" y="85" width="20.1" height="15.0" fill="rgb(210,28,31)" rx="2" ry="2" />
<text  x="1335.95" y="95.5" ></text>
</g>
<g >
<title>__GI___libc_open (29 samples, 3.24%)</title><rect x="4687.1" y="277" width="193.8" height="15.0" fill="rgb(249,211,28)" rx="2" ry="2" />
<text  x="4690.09" y="287.5" >__GI___libc_open</text>
</g>
<g >
<title>[hackathon_fast] (2 samples, 0.22%)</title><rect x="477.7" y="293" width="13.4" height="15.0" fill="rgb(224,159,24)" rx="2" ry="2" />
<text  x="480.71" y="303.5" ></text>
</g>
<g >
<title>Container&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator[](int) (26 samples, 2.91%)</title><rect x="4219.4" y="133" width="173.7" height="15.0" fill="rgb(239,53,1)" rx="2" ry="2" />
<text  x="4222.39" y="143.5" >Container&lt;std::__cxx11..</text>
</g>
<g >
<title>[unknown] (16 samples, 1.79%)</title><rect x="4560.1" y="277" width="107.0" height="15.0" fill="rgb(242,55,23)" rx="2" ry="2" />
<text  x="4563.15" y="287.5" >[unknown]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (4 samples, 0.45%)</title><rect x="5549.0" y="277" width="26.7" height="15.0" fill="rgb(238,228,9)" rx="2" ry="2" />
<text  x="5552.02" y="287.5" >[..</text>
</g>
<g >
<title>__pthread_mutex_lock (2 samples, 0.22%)</title><rect x="664.8" y="101" width="13.4" height="15.0" fill="rgb(209,104,45)" rx="2" ry="2" />
<text  x="667.79" y="111.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#1}&gt; &gt;::operator()() (194 samples, 21.68%)</title><rect x="497.8" y="261" width="1296.2" height="15.0" fill="rgb(213,78,18)" rx="2" ry="2" />
<text  x="500.75" y="271.5" >std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#1}&gt; &gt;::operator()()</text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::unlock() (6 samples, 0.67%)</title><rect x="818.5" y="149" width="40.1" height="15.0" fill="rgb(214,170,36)" rx="2" ry="2" />
<text  x="821.47" y="159.5" >std..</text>
</g>
<g >
<title>std::recursive_mutex::unlock() (6 samples, 0.67%)</title><rect x="818.5" y="133" width="40.1" height="15.0" fill="rgb(224,83,25)" rx="2" ry="2" />
<text  x="821.47" y="143.5" >std..</text>
</g>
<g >
<title>bytesToString[abi:cxx11](unsigned char*, int) (2 samples, 0.22%)</title><rect x="1466.6" y="117" width="13.3" height="15.0" fill="rgb(220,197,33)" rx="2" ry="2" />
<text  x="1469.58" y="127.5" ></text>
</g>
<g >
<title>bytesToString[abi:cxx11](unsigned char*, int) (2 samples, 0.22%)</title><rect x="3978.8" y="149" width="13.4" height="15.0" fill="rgb(217,228,52)" rx="2" ry="2" />
<text  x="3981.85" y="159.5" ></text>
</g>
<g >
<title>__pthread_mutex_lock (2 samples, 0.22%)</title><rect x="3110.2" y="101" width="13.4" height="15.0" fill="rgb(247,142,19)" rx="2" ry="2" />
<text  x="3113.25" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (22 samples, 2.46%)</title><rect x="892.0" y="37" width="147.0" height="15.0" fill="rgb(251,81,8)" rx="2" ry="2" />
<text  x="894.97" y="47.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string() (2 samples, 0.22%)</title><rect x="4172.6" y="85" width="13.4" height="15.0" fill="rgb(230,59,38)" rx="2" ry="2" />
<text  x="4175.61" y="95.5" ></text>
</g>
<g >
<title>IdeaGenerator::getNextIdea(Container&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Container&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, int) (54 samples, 6.03%)</title><rect x="4099.1" y="165" width="360.8" height="15.0" fill="rgb(223,138,7)" rx="2" ry="2" />
<text  x="4102.12" y="175.5" >IdeaGenerator::getNextIdea(Container&lt;std::__cxx1..</text>
</g>
<g >
<title>Container&lt;Event&gt;::pushFront(Event) (3 samples, 0.34%)</title><rect x="1179.3" y="149" width="20.0" height="15.0" fill="rgb(253,74,45)" rx="2" ry="2" />
<text  x="1182.27" y="159.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (7 samples, 0.78%)</title><rect x="5361.9" y="293" width="46.8" height="15.0" fill="rgb(238,95,26)" rx="2" ry="2" />
<text  x="5364.93" y="303.5" >__me..</text>
</g>
<g >
<title>std::mutex::lock() (12 samples, 1.34%)</title><rect x="3571.3" y="117" width="80.2" height="15.0" fill="rgb(228,59,45)" rx="2" ry="2" />
<text  x="3574.27" y="127.5" >std::mute..</text>
</g>
<g >
<title>__lll_lock_wait (5 samples, 0.56%)</title><rect x="4065.7" y="85" width="33.4" height="15.0" fill="rgb(205,41,51)" rx="2" ry="2" />
<text  x="4068.71" y="95.5" >__..</text>
</g>
<g >
<title>[unknown] (5 samples, 0.56%)</title><rect x="4473.3" y="229" width="33.4" height="15.0" fill="rgb(207,26,18)" rx="2" ry="2" />
<text  x="4476.28" y="239.5" >[u..</text>
</g>
<g >
<title>std::__shared_ptr_access&lt;std::mutex, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get() const (2 samples, 0.22%)</title><rect x="3557.9" y="117" width="13.4" height="15.0" fill="rgb(237,155,47)" rx="2" ry="2" />
<text  x="3560.91" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (43 samples, 4.80%)</title><rect x="4914.3" y="197" width="287.3" height="15.0" fill="rgb(254,0,54)" rx="2" ry="2" />
<text  x="4917.27" y="207.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::~unique_lock() (2 samples, 0.22%)</title><rect x="1145.9" y="117" width="13.3" height="15.0" fill="rgb(207,98,8)" rx="2" ry="2" />
<text  x="1148.87" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size() const (2 samples, 0.22%)</title><rect x="1947.7" y="149" width="13.3" height="15.0" fill="rgb(239,74,10)" rx="2" ry="2" />
<text  x="1950.65" y="159.5" ></text>
</g>
<g >
<title>hexStrToByte(char, char) (2 samples, 0.22%)</title><rect x="4045.7" y="133" width="13.3" height="15.0" fill="rgb(239,132,22)" rx="2" ry="2" />
<text  x="4048.66" y="143.5" ></text>
</g>
<g >
<title>__lll_lock_wait (166 samples, 18.55%)</title><rect x="2001.1" y="101" width="1109.1" height="15.0" fill="rgb(242,66,42)" rx="2" ry="2" />
<text  x="2004.11" y="111.5" >__lll_lock_wait</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct(unsigned long, char) (5 samples, 0.56%)</title><rect x="5943.2" y="293" width="33.4" height="15.0" fill="rgb(223,43,46)" rx="2" ry="2" />
<text  x="5946.23" y="303.5" >st..</text>
</g>
<g >
<title>do_lookup_x (5 samples, 0.56%)</title><rect x="4473.3" y="213" width="33.4" height="15.0" fill="rgb(241,87,50)" rx="2" ry="2" />
<text  x="4476.28" y="223.5" >do..</text>
</g>
<g >
<title>xorChecksum(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (2 samples, 0.22%)</title><rect x="4045.7" y="149" width="13.3" height="15.0" fill="rgb(234,131,39)" rx="2" ry="2" />
<text  x="4048.66" y="159.5" ></text>
</g>
<g >
<title>_IO_putc (2 samples, 0.22%)</title><rect x="477.7" y="277" width="13.4" height="15.0" fill="rgb(236,174,36)" rx="2" ry="2" />
<text  x="480.71" y="287.5" ></text>
</g>
<g >
<title>runHackathon(int const*)::{lambda()#2}::operator()() const (337 samples, 37.65%)</title><rect x="1794.0" y="197" width="2251.7" height="15.0" fill="rgb(210,61,41)" rx="2" ry="2" />
<text  x="1796.98" y="207.5" >runHackathon(int const*)::{lambda()#2}::operator()() const</text>
</g>
<g >
<title>Container&lt;Event&gt;::popFront() (16 samples, 1.79%)</title><rect x="537.8" y="149" width="106.9" height="15.0" fill="rgb(218,184,11)" rx="2" ry="2" />
<text  x="540.84" y="159.5" >Container&lt;Eve..</text>
</g>
<g >
<title>malloc (2 samples, 0.22%)</title><rect x="1439.9" y="133" width="13.3" height="15.0" fill="rgb(206,215,43)" rx="2" ry="2" />
<text  x="1442.85" y="143.5" ></text>
</g>
<g >
<title>Container&lt;StrPair&gt;::pushBack(StrPair) (8 samples, 0.89%)</title><rect x="4145.9" y="117" width="53.4" height="15.0" fill="rgb(229,133,29)" rx="2" ry="2" />
<text  x="4148.89" y="127.5" >Conta..</text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::sentry::sentry(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, bool) (2 samples, 0.22%)</title><rect x="4018.9" y="165" width="13.4" height="15.0" fill="rgb(215,148,37)" rx="2" ry="2" />
<text  x="4021.94" y="175.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::unlock() (2 samples, 0.22%)</title><rect x="3958.8" y="149" width="13.4" height="15.0" fill="rgb(239,122,13)" rx="2" ry="2" />
<text  x="3961.80" y="159.5" ></text>
</g>
<g >
<title>_start (5 samples, 0.56%)</title><rect x="5575.7" y="293" width="33.5" height="15.0" fill="rgb(207,97,28)" rx="2" ry="2" />
<text  x="5578.74" y="303.5" >_s..</text>
</g>
<g >
<title>std::mutex::lock() (170 samples, 18.99%)</title><rect x="1987.7" y="117" width="1135.9" height="15.0" fill="rgb(211,25,0)" rx="2" ry="2" />
<text  x="1990.74" y="127.5" >std::mutex::lock()</text>
</g>
<g >
<title>[unknown] (2 samples, 0.22%)</title><rect x="464.3" y="261" width="13.4" height="15.0" fill="rgb(242,57,47)" rx="2" ry="2" />
<text  x="467.35" y="271.5" ></text>
</g>
<g >
<title>Container&lt;Event&gt;::pushBack(Event) (2 samples, 0.22%)</title><rect x="3504.5" y="149" width="13.3" height="15.0" fill="rgb(244,83,54)" rx="2" ry="2" />
<text  x="3507.46" y="159.5" ></text>
</g>
<g >
<title>decltype (__invoke((_S_declval&lt;0ul&gt;)())) std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#2}&gt; &gt;::_M_invoke&lt;0ul&gt;(std::_Index_tuple&lt;0ul&gt;) (337 samples, 37.65%)</title><rect x="1794.0" y="245" width="2251.7" height="15.0" fill="rgb(233,82,51)" rx="2" ry="2" />
<text  x="1796.98" y="255.5" >decltype (__invoke((_S_declval&lt;0ul&gt;)())) std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#2}&gt; &gt;::_M_invoke&lt;0ul&gt;(std::_Index_tuple&lt;0ul&gt;)</text>
</g>
<g >
<title>EventQueue::enqueueEvent(Event, bool) (31 samples, 3.46%)</title><rect x="1159.2" y="165" width="207.2" height="15.0" fill="rgb(244,76,31)" rx="2" ry="2" />
<text  x="1162.23" y="175.5" >EventQueue::enqueueEvent(Ev..</text>
</g>
<g >
<title>std::shared_ptr&lt;std::mutex&gt;::~shared_ptr() (3 samples, 0.34%)</title><rect x="1079.1" y="117" width="20.0" height="15.0" fill="rgb(209,82,6)" rx="2" ry="2" />
<text  x="1082.05" y="127.5" ></text>
</g>
<g >
<title>std::recursive_mutex::lock() (17 samples, 1.90%)</title><rect x="704.9" y="117" width="113.6" height="15.0" fill="rgb(225,181,25)" rx="2" ry="2" />
<text  x="707.88" y="127.5" >std::recursive..</text>
</g>
<g >
<title>Container&lt;Package*&gt;::operator[](int) (3 samples, 0.34%)</title><rect x="1393.1" y="133" width="20.0" height="15.0" fill="rgb(222,20,2)" rx="2" ry="2" />
<text  x="1396.08" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (6 samples, 0.67%)</title><rect x="731.6" y="69" width="40.1" height="15.0" fill="rgb(208,166,17)" rx="2" ry="2" />
<text  x="734.61" y="79.5" >[[k..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() (3 samples, 0.34%)</title><rect x="1079.1" y="69" width="20.0" height="15.0" fill="rgb(218,144,15)" rx="2" ry="2" />
<text  x="1082.05" y="79.5" ></text>
</g>
<g >
<title>std::recursive_mutex::lock() (5 samples, 0.56%)</title><rect x="4065.7" y="117" width="33.4" height="15.0" fill="rgb(243,208,23)" rx="2" ry="2" />
<text  x="4068.71" y="127.5" >st..</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, runHackathon(int const*)::{lambda()#1}&gt;(std::__invoke_other, runHackathon(int const*)::{lambda()#1}&amp;&amp;) (193 samples, 21.56%)</title><rect x="497.8" y="213" width="1289.5" height="15.0" fill="rgb(241,170,37)" rx="2" ry="2" />
<text  x="500.75" y="223.5" >void std::__invoke_impl&lt;void, runHackathon(int const*)::{lambda()#1}&gt;(std::__invoke_other, runHackathon(int const*)::{lambda()#1}&amp;&amp;)</text>
</g>
<g >
<title>[ld-2.27.so] (5 samples, 0.56%)</title><rect x="4473.3" y="277" width="33.4" height="15.0" fill="rgb(223,221,48)" rx="2" ry="2" />
<text  x="4476.28" y="287.5" >[l..</text>
</g>
<g >
<title>runHackathon(int const*)::{lambda()#1}::operator()() const (193 samples, 21.56%)</title><rect x="497.8" y="197" width="1289.5" height="15.0" fill="rgb(223,147,27)" rx="2" ry="2" />
<text  x="500.75" y="207.5" >runHackathon(int const*)::{lambda()#1}::operator()() const</text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::lock() (45 samples, 5.03%)</title><rect x="3658.1" y="133" width="300.7" height="15.0" fill="rgb(212,151,7)" rx="2" ry="2" />
<text  x="3661.13" y="143.5" >std::unique_lock&lt;std::recursive_mutex&gt;::..</text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::lock() (171 samples, 19.11%)</title><rect x="1981.1" y="133" width="1142.5" height="15.0" fill="rgb(214,135,22)" rx="2" ry="2" />
<text  x="1984.06" y="143.5" >std::unique_lock&lt;std::mutex&gt;::lock()</text>
</g>
<g >
<title>hexCharToByte(char) (2 samples, 0.22%)</title><rect x="4045.7" y="117" width="13.3" height="15.0" fill="rgb(214,206,23)" rx="2" ry="2" />
<text  x="4048.66" y="127.5" ></text>
</g>
<g >
<title>[libcrypto.so.1.1] (8 samples, 0.89%)</title><rect x="4506.7" y="277" width="53.4" height="15.0" fill="rgb(244,218,35)" rx="2" ry="2" />
<text  x="4509.69" y="287.5" >[libc..</text>
</g>
<g >
<title>std::__shared_ptr&lt;std::mutex, (__gnu_cxx::_Lock_policy)2&gt;::get() const (2 samples, 0.22%)</title><rect x="3557.9" y="101" width="13.4" height="15.0" fill="rgb(214,161,26)" rx="2" ry="2" />
<text  x="3560.91" y="111.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::lock() (18 samples, 2.01%)</title><rect x="698.2" y="133" width="120.3" height="15.0" fill="rgb(232,187,7)" rx="2" ry="2" />
<text  x="701.20" y="143.5" >std::unique_lo..</text>
</g>
<g >
<title>hexCharToByte(char) (4 samples, 0.45%)</title><rect x="3263.9" y="133" width="26.7" height="15.0" fill="rgb(231,157,41)" rx="2" ry="2" />
<text  x="3266.92" y="143.5" >h..</text>
</g>
<g >
<title>decltype (__invoke((_S_declval&lt;0ul&gt;)())) std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#1}&gt; &gt;::_M_invoke&lt;0ul&gt;(std::_Index_tuple&lt;0ul&gt;) (194 samples, 21.68%)</title><rect x="497.8" y="245" width="1296.2" height="15.0" fill="rgb(246,168,3)" rx="2" ry="2" />
<text  x="500.75" y="255.5" >decltype (__invoke((_S_declval&lt;0ul&gt;)())) std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#1}&gt; &gt;::_M_invoke&lt;0ul&gt;(std::_Index_tuple&lt;0ul&gt;)</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (2 samples, 0.22%)</title><rect x="5929.9" y="293" width="13.3" height="15.0" fill="rgb(222,191,3)" rx="2" ry="2" />
<text  x="5932.87" y="303.5" ></text>
</g>
<g >
<title>__gthread_recursive_mutex_lock(pthread_mutex_t*) (5 samples, 0.56%)</title><rect x="4065.7" y="101" width="33.4" height="15.0" fill="rgb(222,84,45)" rx="2" ry="2" />
<text  x="4068.71" y="111.5" >__..</text>
</g>
<g >
<title>Event::Event(Event const&amp;) (4 samples, 0.45%)</title><rect x="3517.8" y="149" width="26.7" height="15.0" fill="rgb(219,1,22)" rx="2" ry="2" />
<text  x="3520.82" y="159.5" >E..</text>
</g>
<g >
<title>hexCharToByte(char) (4 samples, 0.45%)</title><rect x="1620.3" y="117" width="26.7" height="15.0" fill="rgb(224,124,6)" rx="2" ry="2" />
<text  x="1623.26" y="127.5" >h..</text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::lock() (7 samples, 0.78%)</title><rect x="1099.1" y="101" width="46.8" height="15.0" fill="rgb(244,76,47)" rx="2" ry="2" />
<text  x="1102.09" y="111.5" >std:..</text>
</g>
<g >
<title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count() (3 samples, 0.34%)</title><rect x="1079.1" y="85" width="20.0" height="15.0" fill="rgb(215,111,37)" rx="2" ry="2" />
<text  x="1082.05" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5 samples, 0.56%)</title><rect x="1299.5" y="69" width="33.4" height="15.0" fill="rgb(214,111,1)" rx="2" ry="2" />
<text  x="1302.54" y="79.5" >[[..</text>
</g>
<g >
<title>malloc (4 samples, 0.45%)</title><rect x="5255.0" y="277" width="26.8" height="15.0" fill="rgb(226,219,18)" rx="2" ry="2" />
<text  x="5258.03" y="287.5" >m..</text>
</g>
<g >
<title>__libc_disable_asynccancel (2 samples, 0.22%)</title><rect x="4880.9" y="277" width="13.3" height="15.0" fill="rgb(224,29,24)" rx="2" ry="2" />
<text  x="4883.86" y="287.5" ></text>
</g>
<g >
<title>std::recursive_mutex::lock() (29 samples, 3.24%)</title><rect x="871.9" y="85" width="193.8" height="15.0" fill="rgb(210,111,39)" rx="2" ry="2" />
<text  x="874.92" y="95.5" >std::recursive_mutex::loc..</text>
</g>
<g >
<title>[unknown] (5 samples, 0.56%)</title><rect x="4473.3" y="245" width="33.4" height="15.0" fill="rgb(206,53,9)" rx="2" ry="2" />
<text  x="4476.28" y="255.5" >[u..</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, runHackathon(int const*)::{lambda()#2}&gt;(std::__invoke_other, runHackathon(int const*)::{lambda()#2}&amp;&amp;) (337 samples, 37.65%)</title><rect x="1794.0" y="213" width="2251.7" height="15.0" fill="rgb(227,192,28)" rx="2" ry="2" />
<text  x="1796.98" y="223.5" >void std::__invoke_impl&lt;void, runHackathon(int const*)::{lambda()#2}&gt;(std::__invoke_other, runHackathon(int const*)::{lambda()#2}&amp;&amp;)</text>
</g>
<g >
<title>__lll_lock_wait (25 samples, 2.79%)</title><rect x="871.9" y="53" width="167.1" height="15.0" fill="rgb(212,67,7)" rx="2" ry="2" />
<text  x="874.92" y="63.5" >__lll_lock_wait</text>
</g>
<g >
<title>[[kernel.kallsyms]] (25 samples, 2.79%)</title><rect x="4713.8" y="261" width="167.1" height="15.0" fill="rgb(219,93,52)" rx="2" ry="2" />
<text  x="4716.82" y="271.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>ChecksumTracker&lt;IdeaGenerator, (ChecksumType)0&gt;::updateGlobalChecksum(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (2 samples, 0.22%)</title><rect x="4045.7" y="165" width="13.3" height="15.0" fill="rgb(205,172,39)" rx="2" ry="2" />
<text  x="4048.66" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (9 samples, 1.01%)</title><rect x="3584.6" y="85" width="60.2" height="15.0" fill="rgb(249,56,41)" rx="2" ry="2" />
<text  x="3587.64" y="95.5" >[[kern..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append(char const*, unsigned long) (5 samples, 0.56%)</title><rect x="5896.5" y="293" width="33.4" height="15.0" fill="rgb(211,195,52)" rx="2" ry="2" />
<text  x="5899.46" y="303.5" >st..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (4 samples, 0.45%)</title><rect x="5315.2" y="277" width="26.7" height="15.0" fill="rgb(246,111,24)" rx="2" ry="2" />
<text  x="5318.16" y="287.5" >[..</text>
</g>
<g >
<title>xorChecksum(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (53 samples, 5.92%)</title><rect x="3137.0" y="149" width="354.1" height="15.0" fill="rgb(247,129,14)" rx="2" ry="2" />
<text  x="3139.97" y="159.5" >xorChecksum(std::__cxx11::basic_string&lt;char, std..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#3}&gt; &gt;::operator()() (63 samples, 7.04%)</title><rect x="4045.7" y="261" width="420.9" height="15.0" fill="rgb(246,72,33)" rx="2" ry="2" />
<text  x="4048.66" y="271.5" >std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)..</text>
</g>
<g >
<title>std::thread::_M_start_thread(std::unique_ptr&lt;std::thread::_State, std::default_delete&lt;std::thread::_State&gt; &gt;, void (*)()) (51 samples, 5.70%)</title><rect x="4894.2" y="229" width="340.8" height="15.0" fill="rgb(235,151,2)" rx="2" ry="2" />
<text  x="4897.22" y="239.5" >std::thread::_M_start_thread(std::unique_ptr&lt;s..</text>
</g>
<g >
<title>__gthread_recursive_mutex_lock(pthread_mutex_t*) (29 samples, 3.24%)</title><rect x="871.9" y="69" width="193.8" height="15.0" fill="rgb(245,124,42)" rx="2" ry="2" />
<text  x="874.92" y="79.5" >__gthread_recursive_mutex..</text>
</g>
<g >
<title>__lll_lock_wait (20 samples, 2.23%)</title><rect x="10.0" y="277" width="133.6" height="15.0" fill="rgb(213,199,54)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >__lll_lock_wait</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#1}&gt; &gt; &gt;::_M_run() (194 samples, 21.68%)</title><rect x="497.8" y="277" width="1296.2" height="15.0" fill="rgb(223,161,48)" rx="2" ry="2" />
<text  x="500.75" y="287.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#1}&gt; &gt; &gt;::_M_run()</text>
</g>
<g >
<title>[ld-2.27.so] (5 samples, 0.56%)</title><rect x="4473.3" y="261" width="33.4" height="15.0" fill="rgb(249,7,39)" rx="2" ry="2" />
<text  x="4476.28" y="271.5" >[l..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (40 samples, 4.47%)</title><rect x="197.1" y="261" width="267.2" height="15.0" fill="rgb(207,15,22)" rx="2" ry="2" />
<text  x="200.08" y="271.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append(char const*, unsigned long)@plt (3 samples, 0.34%)</title><rect x="1907.6" y="149" width="20.0" height="15.0" fill="rgb(248,171,46)" rx="2" ry="2" />
<text  x="1910.56" y="159.5" ></text>
</g>
<g >
<title>sha256(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (2 samples, 0.22%)</title><rect x="1466.6" y="133" width="13.3" height="15.0" fill="rgb(220,148,38)" rx="2" ry="2" />
<text  x="1469.58" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add(int volatile*, int) (2 samples, 0.22%)</title><rect x="1085.7" y="37" width="13.4" height="15.0" fill="rgb(206,32,28)" rx="2" ry="2" />
<text  x="1088.73" y="47.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.34%)</title><rect x="4573.5" y="261" width="20.1" height="15.0" fill="rgb(217,142,47)" rx="2" ry="2" />
<text  x="4576.51" y="271.5" ></text>
</g>
<g >
<title>Event::deepCopy(Event const&amp;) (4 samples, 0.45%)</title><rect x="1199.3" y="133" width="26.7" height="15.0" fill="rgb(246,34,14)" rx="2" ry="2" />
<text  x="1202.32" y="143.5" >E..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (16 samples, 1.79%)</title><rect x="36.7" y="261" width="106.9" height="15.0" fill="rgb(243,117,12)" rx="2" ry="2" />
<text  x="39.73" y="271.5" >[[kernel.kall..</text>
</g>
<g >
<title>[unknown] (124 samples, 13.85%)</title><rect x="4466.6" y="293" width="828.5" height="15.0" fill="rgb(245,108,33)" rx="2" ry="2" />
<text  x="4469.60" y="303.5" >[unknown]</text>
</g>
<g >
<title>std::mutex::unlock() (2 samples, 0.22%)</title><rect x="1145.9" y="85" width="13.3" height="15.0" fill="rgb(217,94,17)" rx="2" ry="2" />
<text  x="1148.87" y="95.5" ></text>
</g>
<g >
<title>Package::~Package() (2 samples, 0.22%)</title><rect x="3491.1" y="149" width="13.4" height="15.0" fill="rgb(219,89,43)" rx="2" ry="2" />
<text  x="3494.09" y="159.5" ></text>
</g>
<g >
<title>runHackathon(int const*) (51 samples, 5.70%)</title><rect x="4894.2" y="245" width="340.8" height="15.0" fill="rgb(240,209,54)" rx="2" ry="2" />
<text  x="4897.22" y="255.5" >runHackathon(int const*)</text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::lock() (29 samples, 3.24%)</title><rect x="871.9" y="101" width="193.8" height="15.0" fill="rgb(252,48,39)" rx="2" ry="2" />
<text  x="874.92" y="111.5" >std::unique_lock&lt;std::rec..</text>
</g>
<g >
<title>Event::~Event() (3 samples, 0.34%)</title><rect x="544.5" y="117" width="20.1" height="15.0" fill="rgb(242,171,33)" rx="2" ry="2" />
<text  x="547.53" y="127.5" ></text>
</g>
<g >
<title>__clone (46 samples, 5.14%)</title><rect x="4894.2" y="213" width="307.4" height="15.0" fill="rgb(236,124,33)" rx="2" ry="2" />
<text  x="4897.22" y="223.5" >__clone</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (3 samples, 0.34%)</title><rect x="4406.5" y="133" width="20.0" height="15.0" fill="rgb(235,165,24)" rx="2" ry="2" />
<text  x="4409.47" y="143.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;runHackathon(int const*)::{lambda()#2}&gt;::type std::__invoke&lt;runHackathon(int const*)::{lambda()#2}&gt;(std::__invoke_result&amp;&amp;, (runHackathon(int const*)::{lambda()#2}&amp;&amp;)...) (337 samples, 37.65%)</title><rect x="1794.0" y="229" width="2251.7" height="15.0" fill="rgb(206,94,28)" rx="2" ry="2" />
<text  x="1796.98" y="239.5" >std::__invoke_result&lt;runHackathon(int const*)::{lambda()#2}&gt;::type std::__invoke&lt;runHackathon(int const*)::{lambda()#2}&gt;(std::__invoke_result&amp;&amp;, (runHackathon(int const*)::{lambda()#2}&amp;&amp;)...)</text>
</g>
<g >
<title>Event::deepCopy(Event const&amp;) (2 samples, 0.22%)</title><rect x="1179.3" y="133" width="13.3" height="15.0" fill="rgb(225,210,5)" rx="2" ry="2" />
<text  x="1182.27" y="143.5" ></text>
</g>
<g >
<title>Container&lt;Event&gt;::pushBack(Event) (2 samples, 0.22%)</title><rect x="1165.9" y="149" width="13.4" height="15.0" fill="rgb(206,148,20)" rx="2" ry="2" />
<text  x="1168.91" y="159.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard(std::mutex&amp;) (2 samples, 0.22%)</title><rect x="664.8" y="133" width="13.4" height="15.0" fill="rgb(233,110,24)" rx="2" ry="2" />
<text  x="667.79" y="143.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unique_lock(std::mutex&amp;) (7 samples, 0.78%)</title><rect x="1099.1" y="117" width="46.8" height="15.0" fill="rgb(235,128,2)" rx="2" ry="2" />
<text  x="1102.09" y="127.5" >std:..</text>
</g>
<g >
<title>std::__invoke_result&lt;runHackathon(int const*)::{lambda()#1}&gt;::type std::__invoke&lt;runHackathon(int const*)::{lambda()#1}&gt;(std::__invoke_result&amp;&amp;, (runHackathon(int const*)::{lambda()#1}&amp;&amp;)...) (193 samples, 21.56%)</title><rect x="497.8" y="229" width="1289.5" height="15.0" fill="rgb(225,48,47)" rx="2" ry="2" />
<text  x="500.75" y="239.5" >std::__invoke_result&lt;runHackathon(int const*)::{lambda()#1}&gt;::type std::__invoke&lt;runHackathon(int const*)::{lambda()#1}&gt;(std::__invoke_result&amp;&amp;, (runHackathon(int const*)::{lambda(..</text>
</g>
<g >
<title>hexCharToByte(char) (8 samples, 0.89%)</title><rect x="1707.1" y="101" width="53.5" height="15.0" fill="rgb(206,3,13)" rx="2" ry="2" />
<text  x="1710.12" y="111.5" >hexCh..</text>
</g>
<g >
<title>Event::Event(Event const&amp;) (12 samples, 1.34%)</title><rect x="564.6" y="133" width="80.1" height="15.0" fill="rgb(225,224,16)" rx="2" ry="2" />
<text  x="567.57" y="143.5" >Event::Ev..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (5 samples, 0.56%)</title><rect x="5575.7" y="277" width="33.5" height="15.0" fill="rgb(232,184,26)" rx="2" ry="2" />
<text  x="5578.74" y="287.5" >[[..</text>
</g>
<g >
<title>IdeaGenerator::run() (63 samples, 7.04%)</title><rect x="4045.7" y="181" width="420.9" height="15.0" fill="rgb(220,21,9)" rx="2" ry="2" />
<text  x="4048.66" y="191.5" >IdeaGenerator::run()</text>
</g>
<g >
<title>__lll_lock_wait (41 samples, 4.58%)</title><rect x="3664.8" y="85" width="274.0" height="15.0" fill="rgb(239,83,12)" rx="2" ry="2" />
<text  x="3667.82" y="95.5" >__lll_lock_wait</text>
</g>
<g >
<title>std::_V2::condition_variable_any::notify_all() (15 samples, 1.68%)</title><rect x="3557.9" y="149" width="100.2" height="15.0" fill="rgb(235,72,1)" rx="2" ry="2" />
<text  x="3560.91" y="159.5" >std::_V2::co..</text>
</g>
<g >
<title>decltype (__invoke((_S_declval&lt;0ul&gt;)())) std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#3}&gt; &gt;::_M_invoke&lt;0ul&gt;(std::_Index_tuple&lt;0ul&gt;) (63 samples, 7.04%)</title><rect x="4045.7" y="245" width="420.9" height="15.0" fill="rgb(228,42,37)" rx="2" ry="2" />
<text  x="4048.66" y="255.5" >decltype (__invoke((_S_declval&lt;0ul&gt;)())) std::thread::_In..</text>
</g>
<g >
<title>malloc (19 samples, 2.12%)</title><rect x="5742.8" y="293" width="126.9" height="15.0" fill="rgb(227,35,45)" rx="2" ry="2" />
<text  x="5745.78" y="303.5" >malloc</text>
</g>
<g >
<title>std::ios_base::~ios_base() (2 samples, 0.22%)</title><rect x="464.3" y="277" width="13.4" height="15.0" fill="rgb(239,143,39)" rx="2" ry="2" />
<text  x="467.35" y="287.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (18 samples, 2.01%)</title><rect x="5609.2" y="293" width="120.2" height="15.0" fill="rgb(220,63,20)" rx="2" ry="2" />
<text  x="5612.15" y="303.5" >cfree@GLIBC_2...</text>
</g>
<g >
<title>sha256(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (2 samples, 0.22%)</title><rect x="3978.8" y="165" width="13.4" height="15.0" fill="rgb(247,171,50)" rx="2" ry="2" />
<text  x="3981.85" y="175.5" ></text>
</g>
<g >
<title>Student::run() (192 samples, 21.45%)</title><rect x="504.4" y="181" width="1282.9" height="15.0" fill="rgb(209,216,6)" rx="2" ry="2" />
<text  x="507.44" y="191.5" >Student::run()</text>
</g>
<g >
<title>__GI___pthread_timedjoin_ex (5 samples, 0.56%)</title><rect x="5308.5" y="293" width="33.4" height="15.0" fill="rgb(251,19,35)" rx="2" ry="2" />
<text  x="5311.48" y="303.5" >__..</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (4 samples, 0.45%)</title><rect x="1413.1" y="133" width="26.8" height="15.0" fill="rgb(214,50,50)" rx="2" ry="2" />
<text  x="1416.13" y="143.5" >c..</text>
</g>
<g >
<title>__pthread_mutex_lock (4 samples, 0.45%)</title><rect x="1039.0" y="53" width="26.7" height="15.0" fill="rgb(225,159,45)" rx="2" ry="2" />
<text  x="1041.96" y="63.5" >_..</text>
</g>
<g >
<title>std::__invoke_result&lt;runHackathon(int const*)::{lambda()#3}&gt;::type std::__invoke&lt;runHackathon(int const*)::{lambda()#3}&gt;(std::__invoke_result&amp;&amp;, (runHackathon(int const*)::{lambda()#3}&amp;&amp;)...) (63 samples, 7.04%)</title><rect x="4045.7" y="229" width="420.9" height="15.0" fill="rgb(208,28,36)" rx="2" ry="2" />
<text  x="4048.66" y="239.5" >std::__invoke_result&lt;runHackathon(int const*)::{lambda()#..</text>
</g>
<g >
<title>bytesToString[abi:cxx11](unsigned char*, int) (8 samples, 0.89%)</title><rect x="1566.8" y="117" width="53.5" height="15.0" fill="rgb(242,215,8)" rx="2" ry="2" />
<text  x="1569.80" y="127.5" >bytes..</text>
</g>
<g >
<title>__libc_start_main (51 samples, 5.70%)</title><rect x="4894.2" y="277" width="340.8" height="15.0" fill="rgb(217,103,51)" rx="2" ry="2" />
<text  x="4897.22" y="287.5" >__libc_start_main</text>
</g>
<g >
<title>_dl_lookup_symbol_x (2 samples, 0.22%)</title><rect x="5475.5" y="293" width="13.4" height="15.0" fill="rgb(233,97,30)" rx="2" ry="2" />
<text  x="5478.52" y="303.5" ></text>
</g>
<g >
<title>std::_V2::condition_variable_any::_Unlock&lt;std::unique_lock&lt;std::recursive_mutex&gt; &gt;::~_Unlock() (29 samples, 3.24%)</title><rect x="871.9" y="117" width="193.8" height="15.0" fill="rgb(243,83,12)" rx="2" ry="2" />
<text  x="874.92" y="127.5" >std::_V2::condition_varia..</text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch(int*, int) (3 samples, 0.34%)</title><rect x="1079.1" y="53" width="20.0" height="15.0" fill="rgb(215,223,1)" rx="2" ry="2" />
<text  x="1082.05" y="63.5" ></text>
</g>
<g >
<title>std::_V2::condition_variable_any::notify_all() (5 samples, 0.56%)</title><rect x="658.1" y="149" width="33.4" height="15.0" fill="rgb(232,121,29)" rx="2" ry="2" />
<text  x="661.11" y="159.5" >st..</text>
</g>
<g >
<title>__mmap (5 samples, 0.56%)</title><rect x="5442.1" y="293" width="33.4" height="15.0" fill="rgb(241,30,35)" rx="2" ry="2" />
<text  x="5445.11" y="303.5" >__..</text>
</g>
<g >
<title>Event::Event(Event const&amp;) (4 samples, 0.45%)</title><rect x="1199.3" y="149" width="26.7" height="15.0" fill="rgb(208,108,0)" rx="2" ry="2" />
<text  x="1202.32" y="159.5" >E..</text>
</g>
<g >
<title>xorChecksum(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (38 samples, 4.25%)</title><rect x="1526.7" y="133" width="253.9" height="15.0" fill="rgb(242,204,8)" rx="2" ry="2" />
<text  x="1529.72" y="143.5" >xorChecksum(std::__cxx11::basic_s..</text>
</g>
<g >
<title>__gthread_recursive_mutex_lock(pthread_mutex_t*) (16 samples, 1.79%)</title><rect x="711.6" y="101" width="106.9" height="15.0" fill="rgb(245,224,11)" rx="2" ry="2" />
<text  x="714.56" y="111.5" >__gthread_rec..</text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::unlock() (2 samples, 0.22%)</title><rect x="1353.0" y="149" width="13.4" height="15.0" fill="rgb(250,45,25)" rx="2" ry="2" />
<text  x="1355.99" y="159.5" ></text>
</g>
<g >
<title>Event::~Event() (2 samples, 0.22%)</title><rect x="3491.1" y="165" width="13.4" height="15.0" fill="rgb(207,62,48)" rx="2" ry="2" />
<text  x="3494.09" y="175.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unlock() (2 samples, 0.22%)</title><rect x="1145.9" y="101" width="13.3" height="15.0" fill="rgb(240,71,9)" rx="2" ry="2" />
<text  x="1148.87" y="111.5" ></text>
</g>
<g >
<title>__lll_lock_wait (11 samples, 1.23%)</title><rect x="3571.3" y="101" width="73.5" height="15.0" fill="rgb(223,123,48)" rx="2" ry="2" />
<text  x="3574.27" y="111.5" >__lll_lo..</text>
</g>
<g >
<title>__lll_lock_wait (8 samples, 0.89%)</title><rect x="718.2" y="85" width="53.5" height="15.0" fill="rgb(226,132,54)" rx="2" ry="2" />
<text  x="721.25" y="95.5" >__lll..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (4 samples, 0.45%)</title><rect x="4072.4" y="69" width="26.7" height="15.0" fill="rgb(221,104,36)" rx="2" ry="2" />
<text  x="4075.39" y="79.5" >[..</text>
</g>
<g >
<title>EventQueue::dequeueEvent() (95 samples, 10.61%)</title><rect x="524.5" y="165" width="634.7" height="15.0" fill="rgb(219,182,51)" rx="2" ry="2" />
<text  x="527.48" y="175.5" >EventQueue::dequeueEvent()</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::empty() const (4 samples, 0.45%)</title><rect x="3992.2" y="165" width="26.7" height="15.0" fill="rgb(230,74,41)" rx="2" ry="2" />
<text  x="3995.21" y="175.5" >s..</text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard(std::mutex&amp;) (12 samples, 1.34%)</title><rect x="3571.3" y="133" width="80.2" height="15.0" fill="rgb(205,11,15)" rx="2" ry="2" />
<text  x="3574.27" y="143.5" >std::lock..</text>
</g>
<g >
<title>pthread_cond_broadcast@@GLIBC_2.3.2 (2 samples, 0.22%)</title><rect x="5876.4" y="293" width="13.4" height="15.0" fill="rgb(240,179,4)" rx="2" ry="2" />
<text  x="5879.41" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string() (2 samples, 0.22%)</title><rect x="4433.2" y="133" width="13.4" height="15.0" fill="rgb(241,46,35)" rx="2" ry="2" />
<text  x="4436.20" y="143.5" ></text>
</g>
<g >
<title>void std::_V2::condition_variable_any::wait&lt;std::unique_lock&lt;std::recursive_mutex&gt; &gt;(std::unique_lock&lt;std::recursive_mutex&gt;&amp;) (43 samples, 4.80%)</title><rect x="871.9" y="133" width="287.3" height="15.0" fill="rgb(238,207,18)" rx="2" ry="2" />
<text  x="874.92" y="143.5" >void std::_V2::condition_variable_any:..</text>
</g>
<g >
<title>void std::_V2::condition_variable_any::wait&lt;std::unique_lock&lt;std::recursive_mutex&gt;, EventQueue::dequeueEvent()::{lambda()#1}&gt;(std::unique_lock&lt;std::recursive_mutex&gt;&amp;, EventQueue::dequeueEvent()::{lambda()#1}) (45 samples, 5.03%)</title><rect x="858.6" y="149" width="300.6" height="15.0" fill="rgb(216,50,4)" rx="2" ry="2" />
<text  x="861.56" y="159.5" >void std::_V2::condition_variable_any::w..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#3}&gt; &gt; &gt;::_M_run() (63 samples, 7.04%)</title><rect x="4045.7" y="277" width="420.9" height="15.0" fill="rgb(230,49,39)" rx="2" ry="2" />
<text  x="4048.66" y="287.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple..</text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard(std::mutex&amp;) (2 samples, 0.22%)</title><rect x="1246.1" y="133" width="13.4" height="15.0" fill="rgb(210,13,41)" rx="2" ry="2" />
<text  x="1249.09" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5 samples, 0.56%)</title><rect x="4473.3" y="197" width="33.4" height="15.0" fill="rgb(233,173,4)" rx="2" ry="2" />
<text  x="4476.28" y="207.5" >[[..</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, runHackathon(int const*)::{lambda()#3}&gt;(std::__invoke_other, runHackathon(int const*)::{lambda()#3}&amp;&amp;) (63 samples, 7.04%)</title><rect x="4045.7" y="213" width="420.9" height="15.0" fill="rgb(225,99,19)" rx="2" ry="2" />
<text  x="4048.66" y="223.5" >void std::__invoke_impl&lt;void, runHackathon(int const*)::{..</text>
</g>
<g >
<title>std::mutex::lock() (2 samples, 0.22%)</title><rect x="664.8" y="117" width="13.4" height="15.0" fill="rgb(251,41,36)" rx="2" ry="2" />
<text  x="667.79" y="127.5" ></text>
</g>
<g >
<title>__lll_lock_wait (5 samples, 0.56%)</title><rect x="1112.5" y="69" width="33.4" height="15.0" fill="rgb(229,199,7)" rx="2" ry="2" />
<text  x="1115.46" y="79.5" >__..</text>
</g>
<g >
<title>__gthread_recursive_mutex_unlock(pthread_mutex_t*) (6 samples, 0.67%)</title><rect x="818.5" y="117" width="40.1" height="15.0" fill="rgb(207,186,15)" rx="2" ry="2" />
<text  x="821.47" y="127.5" >__g..</text>
</g>
<g >
<title>std::__shared_ptr_access&lt;std::mutex, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator*() const (2 samples, 0.22%)</title><rect x="3557.9" y="133" width="13.4" height="15.0" fill="rgb(210,53,20)" rx="2" ry="2" />
<text  x="3560.91" y="143.5" ></text>
</g>
<g >
<title>ChecksumTracker&lt;PackageDownloader, (ChecksumType)1&gt;::updateGlobalChecksum(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (252 samples, 28.16%)</title><rect x="1807.3" y="165" width="1683.8" height="15.0" fill="rgb(246,28,19)" rx="2" ry="2" />
<text  x="1810.34" y="175.5" >ChecksumTracker&lt;PackageDownloader, (ChecksumType)1&gt;::updateGlobalChecksum(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)</text>
</g>
<g >
<title>__lll_lock_wait (8 samples, 0.89%)</title><rect x="1279.5" y="85" width="53.4" height="15.0" fill="rgb(223,190,35)" rx="2" ry="2" />
<text  x="1282.50" y="95.5" >__lll..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (5 samples, 0.56%)</title><rect x="5442.1" y="277" width="33.4" height="15.0" fill="rgb(253,44,51)" rx="2" ry="2" />
<text  x="5445.11" y="287.5" >[[..</text>
</g>
<g >
<title>__pthread_mutex_lock (7 samples, 0.78%)</title><rect x="771.7" y="85" width="46.8" height="15.0" fill="rgb(230,203,4)" rx="2" ry="2" />
<text  x="774.70" y="95.5" >__pt..</text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (595 samples, 66.48%)</title><rect x="491.1" y="293" width="3975.5" height="15.0" fill="rgb(224,205,34)" rx="2" ry="2" />
<text  x="494.07" y="303.5" >[libstdc++.so.6.0.25]</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#2}&gt; &gt; &gt;::_M_run() (337 samples, 37.65%)</title><rect x="1794.0" y="277" width="2251.7" height="15.0" fill="rgb(206,223,38)" rx="2" ry="2" />
<text  x="1796.98" y="287.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#2}&gt; &gt; &gt;::_M_run()</text>
</g>
<g >
<title>crossProduct(Container&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Container&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;) (50 samples, 5.59%)</title><rect x="4119.2" y="149" width="334.0" height="15.0" fill="rgb(229,185,0)" rx="2" ry="2" />
<text  x="4122.16" y="159.5" >crossProduct(Container&lt;std::__cxx11::basic_st..</text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::unique_lock(std::recursive_mutex&amp;) (19 samples, 2.12%)</title><rect x="691.5" y="149" width="127.0" height="15.0" fill="rgb(217,201,27)" rx="2" ry="2" />
<text  x="694.52" y="159.5" >std::unique_loc..</text>
</g>
<g >
<title>hackathon_fast (895 samples, 100.00%)</title><rect x="10.0" y="309" width="5980.0" height="15.0" fill="rgb(239,192,15)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >hackathon_fast</text>
</g>
<g >
<title>main (51 samples, 5.70%)</title><rect x="4894.2" y="261" width="340.8" height="15.0" fill="rgb(253,195,18)" rx="2" ry="2" />
<text  x="4897.22" y="271.5" >main</text>
</g>
<g >
<title>[[kernel.kallsyms]] (4 samples, 0.45%)</title><rect x="1119.1" y="53" width="26.8" height="15.0" fill="rgb(208,76,17)" rx="2" ry="2" />
<text  x="1122.14" y="63.5" >[..</text>
</g>
<g >
<title>Container&lt;Event&gt;::Node::~Node() (3 samples, 0.34%)</title><rect x="544.5" y="133" width="20.1" height="15.0" fill="rgb(251,78,18)" rx="2" ry="2" />
<text  x="547.53" y="143.5" ></text>
</g>
<g >
<title>pthread_create@@GLIBC_2.2.5 (5 samples, 0.56%)</title><rect x="5201.6" y="213" width="33.4" height="15.0" fill="rgb(205,20,4)" rx="2" ry="2" />
<text  x="5204.58" y="223.5" >pt..</text>
</g>
<g >
<title>EventQueue::enqueueEvent(Event, bool) (5 samples, 0.56%)</title><rect x="4065.7" y="165" width="33.4" height="15.0" fill="rgb(206,115,5)" rx="2" ry="2" />
<text  x="4068.71" y="175.5" >Ev..</text>
</g>
<g >
<title>Event::deepCopy(Event const&amp;) (2 samples, 0.22%)</title><rect x="1165.9" y="117" width="13.4" height="15.0" fill="rgb(223,127,2)" rx="2" ry="2" />
<text  x="1168.91" y="127.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::mutex, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr() (3 samples, 0.34%)</title><rect x="1079.1" y="101" width="20.0" height="15.0" fill="rgb(229,139,33)" rx="2" ry="2" />
<text  x="1082.05" y="111.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::unique_lock(std::recursive_mutex&amp;) (45 samples, 5.03%)</title><rect x="3658.1" y="149" width="300.7" height="15.0" fill="rgb(245,12,15)" rx="2" ry="2" />
<text  x="3661.13" y="159.5" >std::unique_lock&lt;std::recursive_mutex&gt;::..</text>
</g>
<g >
<title>hexStrToByte(char, char) (17 samples, 1.90%)</title><rect x="1647.0" y="117" width="113.6" height="15.0" fill="rgb(249,158,32)" rx="2" ry="2" />
<text  x="1649.98" y="127.5" >hexStrToByte(c..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (70 samples, 7.82%)</title><rect x="10.0" y="293" width="467.7" height="15.0" fill="rgb(218,181,54)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>Event::deepCopy(Event const&amp;) (4 samples, 0.45%)</title><rect x="3517.8" y="133" width="26.7" height="15.0" fill="rgb(237,5,33)" rx="2" ry="2" />
<text  x="3520.82" y="143.5" >E..</text>
</g>
<g >
<title>_IO_fflush (3 samples, 0.34%)</title><rect x="4667.1" y="277" width="20.0" height="15.0" fill="rgb(241,140,35)" rx="2" ry="2" />
<text  x="4670.05" y="287.5" ></text>
</g>
<g >
<title>pthread_cond_wait@@GLIBC_2.3.2 (46 samples, 5.14%)</title><rect x="157.0" y="277" width="307.3" height="15.0" fill="rgb(207,216,6)" rx="2" ry="2" />
<text  x="159.99" y="287.5" >pthread_cond_wait@@GLIBC_2.3.2</text>
</g>
<g >
<title>[[kernel.kallsyms]] (5 samples, 0.56%)</title><rect x="5201.6" y="197" width="33.4" height="15.0" fill="rgb(245,183,42)" rx="2" ry="2" />
<text  x="5204.58" y="207.5" >[[..</text>
</g>
<g >
<title>__pthread_mutex_unlock (4 samples, 0.45%)</title><rect x="825.2" y="101" width="26.7" height="15.0" fill="rgb(244,172,45)" rx="2" ry="2" />
<text  x="828.15" y="111.5" >_..</text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::~unique_lock() (2 samples, 0.22%)</title><rect x="3123.6" y="149" width="13.4" height="15.0" fill="rgb(232,64,40)" rx="2" ry="2" />
<text  x="3126.61" y="159.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#2}&gt; &gt;::operator()() (337 samples, 37.65%)</title><rect x="1794.0" y="261" width="2251.7" height="15.0" fill="rgb(254,164,8)" rx="2" ry="2" />
<text  x="1796.98" y="271.5" >std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#2}&gt; &gt;::operator()()</text>
</g>
<g >
<title>hexStrToByte(char, char) (28 samples, 3.13%)</title><rect x="3290.6" y="133" width="187.1" height="15.0" fill="rgb(246,151,45)" rx="2" ry="2" />
<text  x="3293.65" y="143.5" >hexStrToByte(char, char)</text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::lock() (12 samples, 1.34%)</title><rect x="1272.8" y="133" width="80.2" height="15.0" fill="rgb(250,9,19)" rx="2" ry="2" />
<text  x="1275.82" y="143.5" >std::uniq..</text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt;(char*, char*, std::forward_iterator_tag) (7 samples, 0.78%)</title><rect x="4620.3" y="261" width="46.8" height="15.0" fill="rgb(236,0,10)" rx="2" ry="2" />
<text  x="4623.28" y="271.5" >void..</text>
</g>
<g >
<title>std::recursive_mutex::lock() (11 samples, 1.23%)</title><rect x="1279.5" y="117" width="73.5" height="15.0" fill="rgb(236,140,23)" rx="2" ry="2" />
<text  x="1282.50" y="127.5" >std::rec..</text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unlock() (2 samples, 0.22%)</title><rect x="3123.6" y="133" width="13.4" height="15.0" fill="rgb(215,50,27)" rx="2" ry="2" />
<text  x="3126.61" y="143.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::unique_lock(std::recursive_mutex&amp;) (5 samples, 0.56%)</title><rect x="4065.7" y="149" width="33.4" height="15.0" fill="rgb(243,72,42)" rx="2" ry="2" />
<text  x="4068.71" y="159.5" >st..</text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unique_lock(std::mutex&amp;) (172 samples, 19.22%)</title><rect x="1974.4" y="149" width="1149.2" height="15.0" fill="rgb(237,12,25)" rx="2" ry="2" />
<text  x="1977.38" y="159.5" >std::unique_lock&lt;std::mutex&gt;::unique_lock(std::mutex&amp;)</text>
</g>
<g >
<title>Event::operator=(Event const&amp;) (2 samples, 0.22%)</title><rect x="1165.9" y="133" width="13.4" height="15.0" fill="rgb(228,73,15)" rx="2" ry="2" />
<text  x="1168.91" y="143.5" ></text>
</g>
<g >
<title>__gthread_recursive_mutex_lock(pthread_mutex_t*) (44 samples, 4.92%)</title><rect x="3664.8" y="101" width="294.0" height="15.0" fill="rgb(227,77,32)" rx="2" ry="2" />
<text  x="3667.82" y="111.5" >__gthread_recursive_mutex_lock(pthread_..</text>
</g>
<g >
<title>Event::deepCopy(Event const&amp;) (11 samples, 1.23%)</title><rect x="571.3" y="117" width="73.4" height="15.0" fill="rgb(224,113,35)" rx="2" ry="2" />
<text  x="574.25" y="127.5" >Event::d..</text>
</g>
<g >
<title>PackageDownloader::run() (336 samples, 37.54%)</title><rect x="1800.7" y="181" width="2245.0" height="15.0" fill="rgb(221,122,35)" rx="2" ry="2" />
<text  x="1803.66" y="191.5" >PackageDownloader::run()</text>
</g>
<g >
<title>__gthread_recursive_mutex_lock(pthread_mutex_t*) (11 samples, 1.23%)</title><rect x="1279.5" y="101" width="73.5" height="15.0" fill="rgb(236,147,17)" rx="2" ry="2" />
<text  x="1282.50" y="111.5" >__gthrea..</text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard() (2 samples, 0.22%)</title><rect x="678.2" y="133" width="13.3" height="15.0" fill="rgb(235,179,17)" rx="2" ry="2" />
<text  x="681.16" y="143.5" ></text>
</g>
<g >
<title>all (895 samples, 100%)</title><rect x="10.0" y="325" width="5980.0" height="15.0" fill="rgb(251,12,43)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>Container&lt;StrPair&gt;::push(StrPair) (11 samples, 1.23%)</title><rect x="4145.9" y="133" width="73.5" height="15.0" fill="rgb(241,173,3)" rx="2" ry="2" />
<text  x="4148.89" y="143.5" >Containe..</text>
</g>
<g >
<title>EventQueue::enqueueEvent(Event, bool) (70 samples, 7.82%)</title><rect x="3504.5" y="165" width="467.7" height="15.0" fill="rgb(250,44,32)" rx="2" ry="2" />
<text  x="3507.46" y="175.5" >EventQueue::enqueueEvent(Event, bool)</text>
</g>
<g >
<title>_int_malloc (13 samples, 1.45%)</title><rect x="5488.9" y="293" width="86.8" height="15.0" fill="rgb(227,8,46)" rx="2" ry="2" />
<text  x="5491.88" y="303.5" >_int_malloc</text>
</g>
<g >
<title>[[kernel.kallsyms]] (141 samples, 15.75%)</title><rect x="2168.1" y="85" width="942.1" height="15.0" fill="rgb(250,198,13)" rx="2" ry="2" />
<text  x="2171.15" y="95.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (7 samples, 0.78%)</title><rect x="1807.3" y="149" width="46.8" height="15.0" fill="rgb(212,196,31)" rx="2" ry="2" />
<text  x="1810.34" y="159.5" >cfre..</text>
</g>
<g >
<title>std::mutex::unlock() (2 samples, 0.22%)</title><rect x="678.2" y="117" width="13.3" height="15.0" fill="rgb(211,69,0)" rx="2" ry="2" />
<text  x="681.16" y="127.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::lock() (5 samples, 0.56%)</title><rect x="4065.7" y="133" width="33.4" height="15.0" fill="rgb(219,94,22)" rx="2" ry="2" />
<text  x="4068.71" y="143.5" >st..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (33 samples, 3.69%)</title><rect x="3718.3" y="69" width="220.5" height="15.0" fill="rgb(236,106,15)" rx="2" ry="2" />
<text  x="3721.27" y="79.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (5 samples, 0.56%)</title><rect x="5408.7" y="293" width="33.4" height="15.0" fill="rgb(225,168,50)" rx="2" ry="2" />
<text  x="5411.70" y="303.5" >__..</text>
</g>
<g >
<title>do_lookup_x (2 samples, 0.22%)</title><rect x="5729.4" y="293" width="13.4" height="15.0" fill="rgb(221,200,13)" rx="2" ry="2" />
<text  x="5732.42" y="303.5" ></text>
</g>
<g >
<title>__pthread_mutex_lock (3 samples, 0.34%)</title><rect x="3938.8" y="85" width="20.0" height="15.0" fill="rgb(212,173,47)" rx="2" ry="2" />
<text  x="3941.76" y="95.5" ></text>
</g>
<g >
<title>runHackathon(int const*)::{lambda()#3}::operator()() const (63 samples, 7.04%)</title><rect x="4045.7" y="197" width="420.9" height="15.0" fill="rgb(207,157,8)" rx="2" ry="2" />
<text  x="4048.66" y="207.5" >runHackathon(int const*)::{lambda()#3}::operator()() const</text>
</g>
<g >
<title>Container&lt;StrPair&gt;::Node::Node() (4 samples, 0.45%)</title><rect x="4159.3" y="101" width="26.7" height="15.0" fill="rgb(220,122,2)" rx="2" ry="2" />
<text  x="4162.25" y="111.5" >C..</text>
</g>
<g >
<title>std::recursive_mutex::lock() (44 samples, 4.92%)</title><rect x="3664.8" y="117" width="294.0" height="15.0" fill="rgb(217,22,7)" rx="2" ry="2" />
<text  x="3667.82" y="127.5" >std::recursive_mutex::lock()</text>
</g>
<g >
<title>bytesToString[abi:cxx11](unsigned char*, int) (12 samples, 1.34%)</title><rect x="3183.7" y="133" width="80.2" height="15.0" fill="rgb(217,205,8)" rx="2" ry="2" />
<text  x="3186.74" y="143.5" >bytesToSt..</text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::unique_lock(std::recursive_mutex&amp;) (12 samples, 1.34%)</title><rect x="1272.8" y="149" width="80.2" height="15.0" fill="rgb(253,174,26)" rx="2" ry="2" />
<text  x="1275.82" y="159.5" >std::uniq..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append(char const*, unsigned long) (3 samples, 0.34%)</title><rect x="1479.9" y="133" width="20.1" height="15.0" fill="rgb(237,155,8)" rx="2" ry="2" />
<text  x="1482.94" y="143.5" ></text>
</g>
<g >
<title>Student::buildIdea() (61 samples, 6.82%)</title><rect x="1379.7" y="165" width="407.6" height="15.0" fill="rgb(206,49,41)" rx="2" ry="2" />
<text  x="1382.72" y="175.5" >Student::buildIdea()</text>
</g>
<g >
<title>malloc (3 samples, 0.34%)</title><rect x="1854.1" y="149" width="20.1" height="15.0" fill="rgb(206,16,16)" rx="2" ry="2" />
<text  x="1857.11" y="159.5" ></text>
</g>
<g >
<title>std::_V2::condition_variable_any::notify_all() (4 samples, 0.45%)</title><rect x="1239.4" y="149" width="26.7" height="15.0" fill="rgb(247,70,42)" rx="2" ry="2" />
<text  x="1242.41" y="159.5" >s..</text>
</g>
</g>
</svg>
