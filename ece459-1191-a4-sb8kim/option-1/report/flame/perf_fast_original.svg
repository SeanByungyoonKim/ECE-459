<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="6000" height="374" onload="init(evt)" viewBox="0 0 6000 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="6000.0" height="374.0" fill="url(#background)"  />
<text id="title" x="3000.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="357" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="5890.00" y="24" >Search</text>
<text id="matched" x="5890.00" y="357" > </text>
<g id="frames">
<g >
<title>std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ifstream() (28 samples, 0.32%)</title><rect x="1337.0" y="277" width="19.3" height="15.0" fill="rgb(232,122,33)" rx="2" ry="2" />
<text  x="1339.97" y="287.5" ></text>
</g>
<g >
<title>std::recursive_mutex::lock() (19 samples, 0.22%)</title><rect x="2318.9" y="117" width="13.1" height="15.0" fill="rgb(247,57,51)" rx="2" ry="2" />
<text  x="2321.88" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (48 samples, 0.56%)</title><rect x="673.8" y="197" width="33.2" height="15.0" fill="rgb(225,149,3)" rx="2" ry="2" />
<text  x="676.83" y="207.5" >[[..</text>
</g>
<g >
<title>__dynamic_cast (147 samples, 1.70%)</title><rect x="18.3" y="261" width="101.6" height="15.0" fill="rgb(212,46,15)" rx="2" ry="2" />
<text  x="21.30" y="271.5" >__dynamic_cast</text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&amp;) const (38 samples, 0.44%)</title><rect x="629.6" y="277" width="26.3" height="15.0" fill="rgb(240,141,21)" rx="2" ry="2" />
<text  x="632.57" y="287.5" >_..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (469 samples, 5.42%)</title><rect x="1725.6" y="277" width="324.3" height="15.0" fill="rgb(248,75,50)" rx="2" ry="2" />
<text  x="1728.59" y="287.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>crossProduct(Container&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Container&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;) (2,105 samples, 24.34%)</title><rect x="3258.6" y="149" width="1455.6" height="15.0" fill="rgb(243,214,29)" rx="2" ry="2" />
<text  x="3261.62" y="159.5" >crossProduct(Container&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Container&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;)</text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf() (39 samples, 0.45%)</title><rect x="1262.3" y="277" width="27.0" height="15.0" fill="rgb(240,15,51)" rx="2" ry="2" />
<text  x="1265.29" y="287.5" >s..</text>
</g>
<g >
<title>std::locale::~locale() (52 samples, 0.60%)</title><rect x="2827.1" y="133" width="36.0" height="15.0" fill="rgb(218,141,9)" rx="2" ry="2" />
<text  x="2830.13" y="143.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (409 samples, 4.73%)</title><rect x="5571.0" y="293" width="282.8" height="15.0" fill="rgb(241,149,14)" rx="2" ry="2" />
<text  x="5573.96" y="303.5" >std::__cxx11::basic_string&lt;char, std:..</text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, char) (103 samples, 1.19%)</title><rect x="5888.4" y="293" width="71.2" height="15.0" fill="rgb(237,193,30)" rx="2" ry="2" />
<text  x="5891.35" y="303.5" >std::bas..</text>
</g>
<g >
<title>__clone (55 samples, 0.64%)</title><rect x="669.0" y="213" width="38.0" height="15.0" fill="rgb(213,192,9)" rx="2" ry="2" />
<text  x="671.99" y="223.5" >__c..</text>
</g>
<g >
<title>memcpy@plt (66 samples, 0.76%)</title><rect x="5438.2" y="293" width="45.6" height="15.0" fill="rgb(251,111,8)" rx="2" ry="2" />
<text  x="5441.19" y="303.5" >memc..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append(char const*, unsigned long) (101 samples, 1.17%)</title><rect x="5495.6" y="293" width="69.8" height="15.0" fill="rgb(227,90,34)" rx="2" ry="2" />
<text  x="5498.59" y="303.5" >std::__..</text>
</g>
<g >
<title>sha256(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (21 samples, 0.24%)</title><rect x="2553.3" y="133" width="14.5" height="15.0" fill="rgb(237,177,1)" rx="2" ry="2" />
<text  x="2556.30" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (68 samples, 0.79%)</title><rect x="1289.9" y="261" width="47.1" height="15.0" fill="rgb(250,25,18)" rx="2" ry="2" />
<text  x="1292.95" y="271.5" >[[ke..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20 samples, 0.23%)</title><rect x="1471.8" y="261" width="13.8" height="15.0" fill="rgb(237,176,34)" rx="2" ry="2" />
<text  x="1474.81" y="271.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;) (28 samples, 0.32%)</title><rect x="1337.0" y="245" width="19.3" height="15.0" fill="rgb(229,205,14)" rx="2" ry="2" />
<text  x="1339.97" y="255.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&amp;) const (41 samples, 0.47%)</title><rect x="4734.9" y="293" width="28.4" height="15.0" fill="rgb(232,195,47)" rx="2" ry="2" />
<text  x="4737.95" y="303.5" >__..</text>
</g>
<g >
<title>StrPair::StrPair() (96 samples, 1.11%)</title><rect x="3513.1" y="101" width="66.4" height="15.0" fill="rgb(239,103,37)" rx="2" ry="2" />
<text  x="3516.09" y="111.5" >StrPair..</text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::sentry::sentry(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, bool) (50 samples, 0.58%)</title><rect x="3204.7" y="165" width="34.6" height="15.0" fill="rgb(239,74,16)" rx="2" ry="2" />
<text  x="3207.68" y="175.5" >st..</text>
</g>
<g >
<title>std::locale::operator=(std::locale const&amp;) (256 samples, 2.96%)</title><rect x="1780.2" y="261" width="177.0" height="15.0" fill="rgb(248,49,44)" rx="2" ry="2" />
<text  x="1783.21" y="271.5" >std::locale::operator=(..</text>
</g>
<g >
<title>std::ctype&lt;char&gt; const&amp; std::use_facet&lt;std::ctype&lt;char&gt; &gt;(std::locale const&amp;) (30 samples, 0.35%)</title><rect x="1642.6" y="245" width="20.8" height="15.0" fill="rgb(231,10,21)" rx="2" ry="2" />
<text  x="1645.61" y="255.5" ></text>
</g>
<g >
<title>runHackathon(int const*) (57 samples, 0.66%)</title><rect x="667.6" y="245" width="39.4" height="15.0" fill="rgb(250,60,26)" rx="2" ry="2" />
<text  x="670.61" y="255.5" >run..</text>
</g>
<g >
<title>__libc_disable_asynccancel (17 samples, 0.20%)</title><rect x="655.9" y="277" width="11.7" height="15.0" fill="rgb(213,6,54)" rx="2" ry="2" />
<text  x="658.85" y="287.5" ></text>
</g>
<g >
<title>StrPair::operator=(StrPair const&amp;) (37 samples, 0.43%)</title><rect x="4654.7" y="117" width="25.6" height="15.0" fill="rgb(221,157,43)" rx="2" ry="2" />
<text  x="4657.73" y="127.5" >S..</text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; const&amp; std::use_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (45 samples, 0.52%)</title><rect x="347.4" y="261" width="31.2" height="15.0" fill="rgb(253,166,32)" rx="2" ry="2" />
<text  x="350.45" y="271.5" >st..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (299 samples, 3.46%)</title><rect x="422.1" y="261" width="206.8" height="15.0" fill="rgb(208,225,21)" rx="2" ry="2" />
<text  x="425.13" y="271.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&amp;) const (40 samples, 0.46%)</title><rect x="4763.3" y="293" width="27.7" height="15.0" fill="rgb(214,36,40)" rx="2" ry="2" />
<text  x="4766.30" y="303.5" >_..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string() (302 samples, 3.49%)</title><rect x="4048.3" y="101" width="208.8" height="15.0" fill="rgb(226,146,24)" rx="2" ry="2" />
<text  x="4051.30" y="111.5" >std::__cxx11::basic_string&lt;..</text>
</g>
<g >
<title>runHackathon(int const*)::{lambda()#2}::operator()() const (864 samples, 9.99%)</title><rect x="2659.1" y="197" width="597.4" height="15.0" fill="rgb(236,83,40)" rx="2" ry="2" />
<text  x="2662.10" y="207.5" >runHackathon(int const*)::{lambda()#2}::operator()() const</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (481 samples, 5.56%)</title><rect x="4970.7" y="293" width="332.7" height="15.0" fill="rgb(218,41,5)" rx="2" ry="2" />
<text  x="4973.74" y="303.5" >__memmove_avx_unaligned_erms</text>
</g>
<g >
<title>[[kernel.kallsyms]] (32 samples, 0.37%)</title><rect x="1430.3" y="261" width="22.1" height="15.0" fill="rgb(218,67,24)" rx="2" ry="2" />
<text  x="1433.32" y="271.5" >[..</text>
</g>
<g >
<title>__lll_lock_wait (31 samples, 0.36%)</title><rect x="2485.5" y="69" width="21.5" height="15.0" fill="rgb(240,161,9)" rx="2" ry="2" />
<text  x="2488.53" y="79.5" >_..</text>
</g>
<g >
<title>__GI___libc_open (319 samples, 3.69%)</title><rect x="408.3" y="277" width="220.6" height="15.0" fill="rgb(207,109,15)" rx="2" ry="2" />
<text  x="411.30" y="287.5" >__GI___libc_open</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#2}&gt; &gt;::operator()() (864 samples, 9.99%)</title><rect x="2659.1" y="261" width="597.4" height="15.0" fill="rgb(233,60,51)" rx="2" ry="2" />
<text  x="2662.10" y="271.5" >std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#2}&gt; &gt;::operat..</text>
</g>
<g >
<title>Student::buildIdea() (174 samples, 2.01%)</title><rect x="2537.4" y="165" width="120.3" height="15.0" fill="rgb(230,131,30)" rx="2" ry="2" />
<text  x="2540.39" y="175.5" >Student::build..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string() (277 samples, 3.20%)</title><rect x="4407.2" y="101" width="191.5" height="15.0" fill="rgb(211,37,51)" rx="2" ry="2" />
<text  x="4410.18" y="111.5" >std::__cxx11::basic_strin..</text>
</g>
<g >
<title>std::__invoke_result&lt;runHackathon(int const*)::{lambda()#3}&gt;::type std::__invoke&lt;runHackathon(int const*)::{lambda()#3}&gt;(std::__invoke_result&amp;&amp;, (runHackathon(int const*)::{lambda()#3}&amp;&amp;)...) (2,115 samples, 24.46%)</title><rect x="3256.5" y="229" width="1462.5" height="15.0" fill="rgb(217,62,50)" rx="2" ry="2" />
<text  x="3259.54" y="239.5" >std::__invoke_result&lt;runHackathon(int const*)::{lambda()#3}&gt;::type std::__invoke&lt;runHackathon(int const*)::{lambda()#3}&gt;(std::__invoke_result&amp;&amp;, (runHackathon(int const*)::{lambda()#3}&amp;&amp;)...)</text>
</g>
<g >
<title>__gthread_recursive_mutex_lock(pthread_mutex_t*) (93 samples, 1.08%)</title><rect x="2392.2" y="69" width="64.3" height="15.0" fill="rgb(209,152,38)" rx="2" ry="2" />
<text  x="2395.18" y="79.5" >__gthre..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (28 samples, 0.32%)</title><rect x="1337.0" y="261" width="19.3" height="15.0" fill="rgb(223,186,26)" rx="2" ry="2" />
<text  x="1339.97" y="271.5" ></text>
</g>
<g >
<title>Container&lt;Package*&gt;::push(Package*) (15 samples, 0.17%)</title><rect x="2273.2" y="165" width="10.4" height="15.0" fill="rgb(226,201,1)" rx="2" ry="2" />
<text  x="2276.24" y="175.5" ></text>
</g>
<g >
<title>std::recursive_mutex::lock() (95 samples, 1.10%)</title><rect x="2390.8" y="85" width="65.7" height="15.0" fill="rgb(207,101,41)" rx="2" ry="2" />
<text  x="2393.80" y="95.5" >std::re..</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (64 samples, 0.74%)</title><rect x="5349.0" y="293" width="44.2" height="15.0" fill="rgb(221,213,24)" rx="2" ry="2" />
<text  x="5351.99" y="303.5" >cfre..</text>
</g>
<g >
<title>xorChecksum(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (205 samples, 2.37%)</title><rect x="2722.0" y="149" width="141.8" height="15.0" fill="rgb(205,0,2)" rx="2" ry="2" />
<text  x="2725.02" y="159.5" >xorChecksum(std::_..</text>
</g>
<g >
<title>EventQueue::enqueueEvent(Event, bool) (19 samples, 0.22%)</title><rect x="2864.5" y="165" width="13.1" height="15.0" fill="rgb(209,145,48)" rx="2" ry="2" />
<text  x="2867.47" y="175.5" ></text>
</g>
<g >
<title>StrPair::~StrPair() (123 samples, 1.42%)</title><rect x="3710.2" y="101" width="85.0" height="15.0" fill="rgb(216,112,41)" rx="2" ry="2" />
<text  x="3713.16" y="111.5" >StrPair::~..</text>
</g>
<g >
<title>std::thread::_M_start_thread(std::unique_ptr&lt;std::thread::_State, std::default_delete&lt;std::thread::_State&gt; &gt;, void (*)()) (56 samples, 0.65%)</title><rect x="668.3" y="229" width="38.7" height="15.0" fill="rgb(250,135,38)" rx="2" ry="2" />
<text  x="671.30" y="239.5" >std..</text>
</g>
<g >
<title>runHackathon(int const*)::{lambda()#1}::operator()() const (561 samples, 6.49%)</title><rect x="2271.2" y="197" width="387.9" height="15.0" fill="rgb(247,183,42)" rx="2" ry="2" />
<text  x="2274.17" y="207.5" >runHackathon(int const*)::{lambda()#1}::operator()()..</text>
</g>
<g >
<title>__strcmp_sse2_unaligned (50 samples, 0.58%)</title><rect x="804.5" y="277" width="34.6" height="15.0" fill="rgb(226,164,31)" rx="2" ry="2" />
<text  x="807.52" y="287.5" >__..</text>
</g>
<g >
<title>bool std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (17 samples, 0.20%)</title><rect x="1579.7" y="245" width="11.7" height="15.0" fill="rgb(217,203,54)" rx="2" ry="2" />
<text  x="1582.68" y="255.5" ></text>
</g>
<g >
<title>hackathon_fast (8,648 samples, 100.00%)</title><rect x="10.0" y="309" width="5980.0" height="15.0" fill="rgb(224,196,25)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >hackathon_fast</text>
</g>
<g >
<title>std::ios_base::~ios_base() (32 samples, 0.37%)</title><rect x="1430.3" y="277" width="22.1" height="15.0" fill="rgb(250,190,20)" rx="2" ry="2" />
<text  x="1433.32" y="287.5" >s..</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::operator bool() const (40 samples, 0.46%)</title><rect x="2979.9" y="165" width="27.7" height="15.0" fill="rgb(226,7,35)" rx="2" ry="2" />
<text  x="2982.95" y="175.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string()@plt (52 samples, 0.60%)</title><rect x="4257.1" y="101" width="36.0" height="15.0" fill="rgb(223,64,1)" rx="2" ry="2" />
<text  x="4260.13" y="111.5" >std..</text>
</g>
<g >
<title>__lll_lock_wait (56 samples, 0.65%)</title><rect x="2681.2" y="101" width="38.7" height="15.0" fill="rgb(213,50,33)" rx="2" ry="2" />
<text  x="2684.22" y="111.5" >__l..</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, runHackathon(int const*)::{lambda()#1}&gt;(std::__invoke_other, runHackathon(int const*)::{lambda()#1}&amp;&amp;) (561 samples, 6.49%)</title><rect x="2271.2" y="213" width="387.9" height="15.0" fill="rgb(235,210,49)" rx="2" ry="2" />
<text  x="2274.17" y="223.5" >void std::__invoke_impl&lt;void, runHackathon(int const..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator=(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (106 samples, 1.23%)</title><rect x="4293.1" y="101" width="73.3" height="15.0" fill="rgb(223,92,23)" rx="2" ry="2" />
<text  x="4296.09" y="111.5" >std::__c..</text>
</g>
<g >
<title>__dynamic_cast (80 samples, 0.93%)</title><rect x="1491.2" y="245" width="55.3" height="15.0" fill="rgb(249,14,3)" rx="2" ry="2" />
<text  x="1494.17" y="255.5" >__dyn..</text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;)@plt (15 samples, 0.17%)</title><rect x="3071.2" y="165" width="10.4" height="15.0" fill="rgb(239,149,37)" rx="2" ry="2" />
<text  x="3074.22" y="175.5" ></text>
</g>
<g >
<title>_int_malloc (50 samples, 0.58%)</title><rect x="5308.9" y="293" width="34.6" height="15.0" fill="rgb(232,186,43)" rx="2" ry="2" />
<text  x="5311.88" y="303.5" >_i..</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, runHackathon(int const*)::{lambda()#3}&gt;(std::__invoke_other, runHackathon(int const*)::{lambda()#3}&amp;&amp;) (2,115 samples, 24.46%)</title><rect x="3256.5" y="213" width="1462.5" height="15.0" fill="rgb(247,215,21)" rx="2" ry="2" />
<text  x="3259.54" y="223.5" >void std::__invoke_impl&lt;void, runHackathon(int const*)::{lambda()#3}&gt;(std::__invoke_other, runHackathon(int const*)::{lambda()#3}&amp;&amp;)</text>
</g>
<g >
<title>std::hex(std::ios_base&amp;) (27 samples, 0.31%)</title><rect x="2798.8" y="117" width="18.6" height="15.0" fill="rgb(238,150,52)" rx="2" ry="2" />
<text  x="2801.78" y="127.5" ></text>
</g>
<g >
<title>__dynamic_cast (109 samples, 1.26%)</title><rect x="4791.0" y="293" width="75.3" height="15.0" fill="rgb(242,202,16)" rx="2" ry="2" />
<text  x="4793.96" y="303.5" >__dynami..</text>
</g>
<g >
<title>__lll_lock_wait (82 samples, 0.95%)</title><rect x="707.0" y="277" width="56.7" height="15.0" fill="rgb(252,223,47)" rx="2" ry="2" />
<text  x="710.02" y="287.5" >__lll_..</text>
</g>
<g >
<title>std::locale::~locale() (134 samples, 1.55%)</title><rect x="1957.2" y="261" width="92.7" height="15.0" fill="rgb(239,103,25)" rx="2" ry="2" />
<text  x="1960.23" y="271.5" >std::locale..</text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::~num_put() (20 samples, 0.23%)</title><rect x="1471.8" y="277" width="13.8" height="15.0" fill="rgb(242,89,50)" rx="2" ry="2" />
<text  x="1474.81" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (39 samples, 0.45%)</title><rect x="1262.3" y="261" width="27.0" height="15.0" fill="rgb(243,191,2)" rx="2" ry="2" />
<text  x="1265.29" y="271.5" >[..</text>
</g>
<g >
<title>std::locale::id::_M_id() const (27 samples, 0.31%)</title><rect x="292.8" y="261" width="18.7" height="15.0" fill="rgb(249,169,0)" rx="2" ry="2" />
<text  x="295.82" y="271.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, char) (101 samples, 1.17%)</title><rect x="1356.3" y="277" width="69.9" height="15.0" fill="rgb(212,31,15)" rx="2" ry="2" />
<text  x="1359.33" y="287.5" >std::ba..</text>
</g>
<g >
<title>__gthread_recursive_mutex_lock(pthread_mutex_t*) (19 samples, 0.22%)</title><rect x="2318.9" y="101" width="13.1" height="15.0" fill="rgb(250,15,11)" rx="2" ry="2" />
<text  x="2321.88" y="111.5" ></text>
</g>
<g >
<title>StrPair::operator=(StrPair const&amp;) (189 samples, 2.19%)</title><rect x="3579.5" y="101" width="130.7" height="15.0" fill="rgb(235,109,10)" rx="2" ry="2" />
<text  x="3582.47" y="111.5" >StrPair::operato..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator=(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)@plt (59 samples, 0.68%)</title><rect x="4366.4" y="101" width="40.8" height="15.0" fill="rgb(240,80,7)" rx="2" ry="2" />
<text  x="4369.38" y="111.5" >std..</text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&amp;) const (20 samples, 0.23%)</title><rect x="1471.8" y="245" width="13.8" height="15.0" fill="rgb(213,108,15)" rx="2" ry="2" />
<text  x="1474.81" y="255.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt; const&amp; std::use_facet&lt;std::ctype&lt;char&gt; &gt;(std::locale const&amp;) (64 samples, 0.74%)</title><rect x="244.4" y="261" width="44.3" height="15.0" fill="rgb(215,41,46)" rx="2" ry="2" />
<text  x="247.41" y="271.5" >std:..</text>
</g>
<g >
<title>Container&lt;Package*&gt;::pushBack(Package*) (15 samples, 0.17%)</title><rect x="2273.2" y="149" width="10.4" height="15.0" fill="rgb(210,82,43)" rx="2" ry="2" />
<text  x="2276.24" y="159.5" ></text>
</g>
<g >
<title>std::mutex::lock() (44 samples, 0.51%)</title><rect x="2484.1" y="85" width="30.5" height="15.0" fill="rgb(223,33,16)" rx="2" ry="2" />
<text  x="2487.15" y="95.5" >st..</text>
</g>
<g >
<title>__memchr_avx2 (151 samples, 1.75%)</title><rect x="4866.3" y="293" width="104.4" height="15.0" fill="rgb(234,147,49)" rx="2" ry="2" />
<text  x="4869.33" y="303.5" >__memchr_avx2</text>
</g>
<g >
<title>__lll_lock_wait (69 samples, 0.80%)</title><rect x="2394.3" y="53" width="47.7" height="15.0" fill="rgb(222,55,1)" rx="2" ry="2" />
<text  x="2397.26" y="63.5" >__ll..</text>
</g>
<g >
<title>malloc_consolidate (18 samples, 0.21%)</title><rect x="872.3" y="277" width="12.4" height="15.0" fill="rgb(252,44,22)" rx="2" ry="2" />
<text  x="875.29" y="287.5" ></text>
</g>
<g >
<title>hexStrToByte(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (40 samples, 0.46%)</title><rect x="2734.5" y="133" width="27.6" height="15.0" fill="rgb(221,195,33)" rx="2" ry="2" />
<text  x="2737.47" y="143.5" >h..</text>
</g>
<g >
<title>main (57 samples, 0.66%)</title><rect x="667.6" y="261" width="39.4" height="15.0" fill="rgb(221,214,32)" rx="2" ry="2" />
<text  x="670.61" y="271.5" >main</text>
</g>
<g >
<title>__lll_lock_wait (18 samples, 0.21%)</title><rect x="2318.9" y="85" width="12.4" height="15.0" fill="rgb(231,170,29)" rx="2" ry="2" />
<text  x="2321.88" y="95.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#3}&gt; &gt; &gt;::_M_run() (2,115 samples, 24.46%)</title><rect x="3256.5" y="277" width="1462.5" height="15.0" fill="rgb(209,225,32)" rx="2" ry="2" />
<text  x="3259.54" y="287.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#3}&gt; &gt; &gt;::_M_run()</text>
</g>
<g >
<title>[[kernel.kallsyms]] (57 samples, 0.66%)</title><rect x="2402.6" y="37" width="39.4" height="15.0" fill="rgb(219,159,9)" rx="2" ry="2" />
<text  x="2405.55" y="47.5" >[[k..</text>
</g>
<g >
<title>std::ios_base::ios_base() (18 samples, 0.21%)</title><rect x="1436.5" y="245" width="12.5" height="15.0" fill="rgb(230,94,31)" rx="2" ry="2" />
<text  x="1439.54" y="255.5" ></text>
</g>
<g >
<title>Container&lt;StrPair&gt;::push(StrPair) (2,101 samples, 24.29%)</title><rect x="3258.6" y="133" width="1452.8" height="15.0" fill="rgb(243,173,44)" rx="2" ry="2" />
<text  x="3261.62" y="143.5" >Container&lt;StrPair&gt;::push(StrPair)</text>
</g>
<g >
<title>std::ios_base::setf(std::_Ios_Fmtflags, std::_Ios_Fmtflags) (22 samples, 0.25%)</title><rect x="2800.9" y="101" width="15.2" height="15.0" fill="rgb(238,178,14)" rx="2" ry="2" />
<text  x="2803.85" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (60 samples, 0.69%)</title><rect x="722.2" y="261" width="41.5" height="15.0" fill="rgb(223,21,0)" rx="2" ry="2" />
<text  x="725.23" y="271.5" >[[k..</text>
</g>
<g >
<title>decltype (__invoke((_S_declval&lt;0ul&gt;)())) std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#2}&gt; &gt;::_M_invoke&lt;0ul&gt;(std::_Index_tuple&lt;0ul&gt;) (864 samples, 9.99%)</title><rect x="2659.1" y="245" width="597.4" height="15.0" fill="rgb(249,132,25)" rx="2" ry="2" />
<text  x="2662.10" y="255.5" >decltype (__invoke((_S_declval&lt;0ul&gt;)())) std::thread::_Invoker&lt;std::tuple&lt;runHacka..</text>
</g>
<g >
<title>__libc_start_main (57 samples, 0.66%)</title><rect x="667.6" y="277" width="39.4" height="15.0" fill="rgb(220,101,19)" rx="2" ry="2" />
<text  x="670.61" y="287.5" >__l..</text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (4,348 samples, 50.28%)</title><rect x="1712.4" y="293" width="3006.6" height="15.0" fill="rgb(229,174,5)" rx="2" ry="2" />
<text  x="1715.45" y="303.5" >[libstdc++.so.6.0.25]</text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::unique_lock(std::recursive_mutex&amp;) (21 samples, 0.24%)</title><rect x="2317.5" y="149" width="14.5" height="15.0" fill="rgb(215,56,34)" rx="2" ry="2" />
<text  x="2320.50" y="159.5" ></text>
</g>
<g >
<title>all (8,648 samples, 100%)</title><rect x="10.0" y="325" width="5980.0" height="15.0" fill="rgb(233,32,47)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>IdeaGenerator::getNextIdea[abi:cxx11](int) (2,112 samples, 24.42%)</title><rect x="3257.2" y="165" width="1460.5" height="15.0" fill="rgb(224,172,46)" rx="2" ry="2" />
<text  x="3260.23" y="175.5" >IdeaGenerator::getNextIdea[abi:cxx11](int)</text>
</g>
<g >
<title>__gthread_recursive_mutex_unlock(pthread_mutex_t*) (15 samples, 0.17%)</title><rect x="2377.7" y="69" width="10.3" height="15.0" fill="rgb(238,97,6)" rx="2" ry="2" />
<text  x="2380.66" y="79.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;runHackathon(int const*)::{lambda()#2}&gt;::type std::__invoke&lt;runHackathon(int const*)::{lambda()#2}&gt;(std::__invoke_result&amp;&amp;, (runHackathon(int const*)::{lambda()#2}&amp;&amp;)...) (864 samples, 9.99%)</title><rect x="2659.1" y="229" width="597.4" height="15.0" fill="rgb(217,74,4)" rx="2" ry="2" />
<text  x="2662.10" y="239.5" >std::__invoke_result&lt;runHackathon(int const*)::{lambda()#2}&gt;::type std::__invoke&lt;r..</text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unique_lock(std::mutex&amp;) (58 samples, 0.67%)</title><rect x="2679.8" y="149" width="40.1" height="15.0" fill="rgb(252,194,34)" rx="2" ry="2" />
<text  x="2682.84" y="159.5" >std..</text>
</g>
<g >
<title>malloc (23 samples, 0.27%)</title><rect x="856.4" y="277" width="15.9" height="15.0" fill="rgb(218,136,3)" rx="2" ry="2" />
<text  x="859.38" y="287.5" ></text>
</g>
<g >
<title>__pthread_mutex_cond_lock (15 samples, 0.17%)</title><rect x="790.0" y="277" width="10.4" height="15.0" fill="rgb(214,85,18)" rx="2" ry="2" />
<text  x="793.00" y="287.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#1}&gt; &gt; &gt;::_M_run() (561 samples, 6.49%)</title><rect x="2271.2" y="277" width="387.9" height="15.0" fill="rgb(246,188,22)" rx="2" ry="2" />
<text  x="2274.17" y="287.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#3}&gt; &gt;::operator()() (2,115 samples, 24.46%)</title><rect x="3256.5" y="261" width="1462.5" height="15.0" fill="rgb(239,152,43)" rx="2" ry="2" />
<text  x="3259.54" y="271.5" >std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#3}&gt; &gt;::operator()()</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)@plt (49 samples, 0.57%)</title><rect x="4014.4" y="101" width="33.9" height="15.0" fill="rgb(229,57,15)" rx="2" ry="2" />
<text  x="4017.41" y="111.5" >st..</text>
</g>
<g >
<title>bool std::has_facet&lt;std::ctype&lt;char&gt; &gt;(std::locale const&amp;) (27 samples, 0.31%)</title><rect x="1549.9" y="245" width="18.7" height="15.0" fill="rgb(212,2,36)" rx="2" ry="2" />
<text  x="1552.95" y="255.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::lock() (46 samples, 0.53%)</title><rect x="2482.8" y="101" width="31.8" height="15.0" fill="rgb(229,81,12)" rx="2" ry="2" />
<text  x="2485.77" y="111.5" >st..</text>
</g>
<g >
<title>Container&lt;StrPair&gt;::pushBack(StrPair) (1,987 samples, 22.98%)</title><rect x="3258.6" y="117" width="1374.0" height="15.0" fill="rgb(238,118,2)" rx="2" ry="2" />
<text  x="3261.62" y="127.5" >Container&lt;StrPair&gt;::pushBack(StrPair)</text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (47 samples, 0.54%)</title><rect x="1733.9" y="261" width="32.5" height="15.0" fill="rgb(231,168,44)" rx="2" ry="2" />
<text  x="1736.88" y="271.5" >[l..</text>
</g>
<g >
<title>std::locale::~locale() (47 samples, 0.54%)</title><rect x="2622.4" y="117" width="32.5" height="15.0" fill="rgb(222,120,35)" rx="2" ry="2" />
<text  x="2625.45" y="127.5" >st..</text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::lock() (98 samples, 1.13%)</title><rect x="2388.7" y="101" width="67.8" height="15.0" fill="rgb(214,117,36)" rx="2" ry="2" />
<text  x="2391.72" y="111.5" >std::un..</text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::sentry::sentry(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, bool) (20 samples, 0.23%)</title><rect x="5959.6" y="293" width="13.8" height="15.0" fill="rgb(231,150,7)" rx="2" ry="2" />
<text  x="5962.57" y="303.5" ></text>
</g>
<g >
<title>bool std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (48 samples, 0.56%)</title><rect x="184.9" y="261" width="33.2" height="15.0" fill="rgb(211,45,33)" rx="2" ry="2" />
<text  x="187.95" y="271.5" >bo..</text>
</g>
<g >
<title>void std::_V2::condition_variable_any::wait&lt;std::unique_lock&lt;std::recursive_mutex&gt;, EventQueue::dequeueEvent()::{lambda()#1}&gt;(std::unique_lock&lt;std::recursive_mutex&gt;&amp;, EventQueue::dequeueEvent()::{lambda()#1}) (284 samples, 3.28%)</title><rect x="2332.7" y="149" width="196.4" height="15.0" fill="rgb(249,159,5)" rx="2" ry="2" />
<text  x="2335.71" y="159.5" >void std::_V2::condition_..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (548 samples, 6.34%)</title><rect x="10.0" y="277" width="378.9" height="15.0" fill="rgb(242,109,6)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (15 samples, 0.17%)</title><rect x="3795.2" y="101" width="10.4" height="15.0" fill="rgb(242,149,16)" rx="2" ry="2" />
<text  x="3798.21" y="111.5" ></text>
</g>
<g >
<title>std::_V2::condition_variable_any::_Unlock&lt;std::unique_lock&lt;std::recursive_mutex&gt; &gt;::~_Unlock() (99 samples, 1.14%)</title><rect x="2388.0" y="117" width="68.5" height="15.0" fill="rgb(211,26,14)" rx="2" ry="2" />
<text  x="2391.03" y="127.5" >std::_V..</text>
</g>
<g >
<title>malloc (46 samples, 0.53%)</title><rect x="5395.3" y="293" width="31.8" height="15.0" fill="rgb(208,170,4)" rx="2" ry="2" />
<text  x="5398.32" y="303.5" >ma..</text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::~unique_lock() (17 samples, 0.20%)</title><rect x="2517.3" y="117" width="11.8" height="15.0" fill="rgb(251,229,43)" rx="2" ry="2" />
<text  x="2520.34" y="127.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (30 samples, 0.35%)</title><rect x="765.1" y="277" width="20.8" height="15.0" fill="rgb(249,198,6)" rx="2" ry="2" />
<text  x="768.11" y="287.5" ></text>
</g>
<g >
<title>virtual thunk to std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ifstream() (16 samples, 0.19%)</title><rect x="1700.7" y="277" width="11.1" height="15.0" fill="rgb(241,48,34)" rx="2" ry="2" />
<text  x="1703.69" y="287.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, runHackathon(int const*)::{lambda()#2}&gt;(std::__invoke_other, runHackathon(int const*)::{lambda()#2}&amp;&amp;) (864 samples, 9.99%)</title><rect x="2659.1" y="213" width="597.4" height="15.0" fill="rgb(221,89,52)" rx="2" ry="2" />
<text  x="2662.10" y="223.5" >void std::__invoke_impl&lt;void, runHackathon(int const*)::{lambda()#2}&gt;(std::__invok..</text>
</g>
<g >
<title>std::locale::locale() (320 samples, 3.70%)</title><rect x="2049.9" y="261" width="221.3" height="15.0" fill="rgb(231,115,40)" rx="2" ry="2" />
<text  x="2052.89" y="271.5" >std::locale::locale()</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::operator&lt;&lt;(std::ios_base&amp; (*)(std::ios_base&amp;)) (32 samples, 0.37%)</title><rect x="2796.7" y="133" width="22.1" height="15.0" fill="rgb(208,16,24)" rx="2" ry="2" />
<text  x="2799.70" y="143.5" >s..</text>
</g>
<g >
<title>IdeaGenerator::run() (2,115 samples, 24.46%)</title><rect x="3256.5" y="181" width="1462.5" height="15.0" fill="rgb(238,192,28)" rx="2" ry="2" />
<text  x="3259.54" y="191.5" >IdeaGenerator::run()</text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;) (86 samples, 0.99%)</title><rect x="3011.8" y="165" width="59.4" height="15.0" fill="rgb(219,19,9)" rx="2" ry="2" />
<text  x="3014.76" y="175.5" >std::b..</text>
</g>
<g >
<title>PackageDownloader::run() (858 samples, 9.92%)</title><rect x="2660.5" y="181" width="593.3" height="15.0" fill="rgb(239,159,33)" rx="2" ry="2" />
<text  x="2663.48" y="191.5" >PackageDownloader::run()</text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&amp;) const (25 samples, 0.29%)</title><rect x="1454.5" y="245" width="17.3" height="15.0" fill="rgb(235,98,42)" rx="2" ry="2" />
<text  x="1457.52" y="255.5" ></text>
</g>
<g >
<title>Student::run() (558 samples, 6.45%)</title><rect x="2273.2" y="181" width="385.9" height="15.0" fill="rgb(224,206,20)" rx="2" ry="2" />
<text  x="2276.24" y="191.5" >Student::run()</text>
</g>
<g >
<title>ChecksumTracker&lt;PackageDownloader, (ChecksumType)1&gt;::updateGlobalChecksum(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (294 samples, 3.40%)</title><rect x="2660.5" y="165" width="203.3" height="15.0" fill="rgb(229,130,25)" rx="2" ry="2" />
<text  x="2663.48" y="175.5" >ChecksumTracker&lt;PackageDow..</text>
</g>
<g >
<title>xorChecksum(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (107 samples, 1.24%)</title><rect x="2582.3" y="133" width="74.0" height="15.0" fill="rgb(244,167,36)" rx="2" ry="2" />
<text  x="2585.34" y="143.5" >xorCheck..</text>
</g>
<g >
<title>bool std::has_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (36 samples, 0.42%)</title><rect x="158.7" y="261" width="24.9" height="15.0" fill="rgb(229,130,21)" rx="2" ry="2" />
<text  x="161.67" y="271.5" >b..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (306 samples, 3.54%)</title><rect x="1489.1" y="261" width="211.6" height="15.0" fill="rgb(209,53,20)" rx="2" ry="2" />
<text  x="1492.10" y="271.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (22 samples, 0.25%)</title><rect x="2491.8" y="53" width="15.2" height="15.0" fill="rgb(215,50,8)" rx="2" ry="2" />
<text  x="2494.76" y="63.5" ></text>
</g>
<g >
<title>Container&lt;Event&gt;::popFront() (26 samples, 0.30%)</title><rect x="2284.3" y="149" width="18.0" height="15.0" fill="rgb(221,119,4)" rx="2" ry="2" />
<text  x="2287.31" y="159.5" ></text>
</g>
<g >
<title>std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;unsigned int&gt;(std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::ios_base&amp;, std::_Ios_Iostate&amp;, unsigned int&amp;) const (54 samples, 0.62%)</title><rect x="1299.6" y="245" width="37.4" height="15.0" fill="rgb(253,76,53)" rx="2" ry="2" />
<text  x="1302.63" y="255.5" >std..</text>
</g>
<g >
<title>bool std::has_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (15 samples, 0.17%)</title><rect x="1568.6" y="245" width="10.4" height="15.0" fill="rgb(205,40,0)" rx="2" ry="2" />
<text  x="1571.62" y="255.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, char) (168 samples, 1.94%)</title><rect x="3081.6" y="165" width="116.2" height="15.0" fill="rgb(207,203,40)" rx="2" ry="2" />
<text  x="3084.60" y="175.5" >std::basic_ist..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#1}&gt; &gt;::operator()() (561 samples, 6.49%)</title><rect x="2271.2" y="261" width="387.9" height="15.0" fill="rgb(230,49,20)" rx="2" ry="2" />
<text  x="2274.17" y="271.5" >std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int co..</text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::unlock() (19 samples, 0.22%)</title><rect x="2374.9" y="101" width="13.1" height="15.0" fill="rgb(241,85,9)" rx="2" ry="2" />
<text  x="2377.89" y="111.5" ></text>
</g>
<g >
<title>bool std::has_facet&lt;std::ctype&lt;char&gt; &gt;(std::locale const&amp;) (44 samples, 0.51%)</title><rect x="126.9" y="261" width="30.4" height="15.0" fill="rgb(243,160,46)" rx="2" ry="2" />
<text  x="129.86" y="271.5" >bo..</text>
</g>
<g >
<title>StrPair::~StrPair() (41 samples, 0.47%)</title><rect x="4680.3" y="117" width="28.4" height="15.0" fill="rgb(205,211,41)" rx="2" ry="2" />
<text  x="4683.32" y="127.5" >St..</text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; const&amp; std::use_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (37 samples, 0.43%)</title><rect x="321.9" y="261" width="25.5" height="15.0" fill="rgb(215,21,11)" rx="2" ry="2" />
<text  x="324.86" y="271.5" >s..</text>
</g>
<g >
<title>virtual thunk to std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringstream() (306 samples, 3.54%)</title><rect x="1489.1" y="277" width="211.6" height="15.0" fill="rgb(234,191,8)" rx="2" ry="2" />
<text  x="1492.10" y="287.5" >virtual thunk to std::__cxx..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,461 samples, 28.46%)</title><rect x="10.0" y="293" width="1701.8" height="15.0" fill="rgb(211,213,48)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (47 samples, 0.54%)</title><rect x="2687.4" y="85" width="32.5" height="15.0" fill="rgb(232,223,50)" rx="2" ry="2" />
<text  x="2690.45" y="95.5" >[[..</text>
</g>
<g >
<title>void std::_V2::condition_variable_any::wait&lt;std::unique_lock&lt;std::recursive_mutex&gt; &gt;(std::unique_lock&lt;std::recursive_mutex&gt;&amp;) (251 samples, 2.90%)</title><rect x="2355.5" y="133" width="173.6" height="15.0" fill="rgb(237,221,54)" rx="2" ry="2" />
<text  x="2358.53" y="143.5" >void std::_V2::conditi..</text>
</g>
<g >
<title>Student::getPackagesChecksum[abi:cxx11]() (153 samples, 1.77%)</title><rect x="2550.5" y="149" width="105.8" height="15.0" fill="rgb(214,155,48)" rx="2" ry="2" />
<text  x="2553.53" y="159.5" >Student::get..</text>
</g>
<g >
<title>StrPair::StrPair() (31 samples, 0.36%)</title><rect x="4632.6" y="117" width="21.4" height="15.0" fill="rgb(242,55,1)" rx="2" ry="2" />
<text  x="4635.61" y="127.5" >S..</text>
</g>
<g >
<title>std::_V2::condition_variable_any::_Unlock&lt;std::unique_lock&lt;std::recursive_mutex&gt; &gt;::_Unlock(std::unique_lock&lt;std::recursive_mutex&gt;&amp;) (20 samples, 0.23%)</title><rect x="2374.2" y="117" width="13.8" height="15.0" fill="rgb(240,197,34)" rx="2" ry="2" />
<text  x="2377.20" y="127.5" ></text>
</g>
<g >
<title>pthread_cond_wait@@GLIBC_2.3.2 (536 samples, 6.20%)</title><rect x="884.7" y="277" width="370.7" height="15.0" fill="rgb(220,124,50)" rx="2" ry="2" />
<text  x="887.73" y="287.5" >pthread_cond_wait@@GLIBC_2.3.2</text>
</g>
<g >
<title>sha256(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (22 samples, 0.25%)</title><rect x="2946.1" y="165" width="15.2" height="15.0" fill="rgb(223,63,14)" rx="2" ry="2" />
<text  x="2949.06" y="175.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (320 samples, 3.70%)</title><rect x="2049.9" y="277" width="221.3" height="15.0" fill="rgb(244,190,15)" rx="2" ry="2" />
<text  x="2052.89" y="287.5" >[libstdc++.so.6.0.25]</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (295 samples, 3.41%)</title><rect x="3810.4" y="101" width="204.0" height="15.0" fill="rgb(211,77,52)" rx="2" ry="2" />
<text  x="3813.43" y="111.5" >std::__cxx11::basic_string..</text>
</g>
<g >
<title>__pthread_mutex_lock (21 samples, 0.24%)</title><rect x="2442.0" y="53" width="14.5" height="15.0" fill="rgb(243,149,49)" rx="2" ry="2" />
<text  x="2444.97" y="63.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string()@plt (49 samples, 0.57%)</title><rect x="4598.7" y="101" width="33.9" height="15.0" fill="rgb(209,82,14)" rx="2" ry="2" />
<text  x="4601.72" y="111.5" >st..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (439 samples, 5.08%)</title><rect x="951.8" y="261" width="303.6" height="15.0" fill="rgb(246,136,4)" rx="2" ry="2" />
<text  x="954.81" y="271.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>std::__invoke_result&lt;runHackathon(int const*)::{lambda()#1}&gt;::type std::__invoke&lt;runHackathon(int const*)::{lambda()#1}&gt;(std::__invoke_result&amp;&amp;, (runHackathon(int const*)::{lambda()#1}&amp;&amp;)...) (561 samples, 6.49%)</title><rect x="2271.2" y="229" width="387.9" height="15.0" fill="rgb(234,210,42)" rx="2" ry="2" />
<text  x="2274.17" y="239.5" >std::__invoke_result&lt;runHackathon(int const*)::{lamb..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (25 samples, 0.29%)</title><rect x="1454.5" y="261" width="17.3" height="15.0" fill="rgb(213,110,23)" rx="2" ry="2" />
<text  x="1457.52" y="271.5" ></text>
</g>
<g >
<title>std::recursive_mutex::unlock() (15 samples, 0.17%)</title><rect x="2377.7" y="85" width="10.3" height="15.0" fill="rgb(231,153,44)" rx="2" ry="2" />
<text  x="2380.66" y="95.5" ></text>
</g>
<g >
<title>std::mutex::lock() (57 samples, 0.66%)</title><rect x="2680.5" y="117" width="39.4" height="15.0" fill="rgb(222,1,42)" rx="2" ry="2" />
<text  x="2683.53" y="127.5" >std..</text>
</g>
<g >
<title>std::__numpunct_cache&lt;char&gt;::~__numpunct_cache() (68 samples, 0.79%)</title><rect x="1289.9" y="277" width="47.1" height="15.0" fill="rgb(211,186,23)" rx="2" ry="2" />
<text  x="1292.95" y="287.5" >std:..</text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::~num_get() (25 samples, 0.29%)</title><rect x="1454.5" y="277" width="17.3" height="15.0" fill="rgb(212,2,46)" rx="2" ry="2" />
<text  x="1457.52" y="287.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#2}&gt; &gt; &gt;::_M_run() (864 samples, 9.99%)</title><rect x="2659.1" y="277" width="597.4" height="15.0" fill="rgb(233,147,13)" rx="2" ry="2" />
<text  x="2662.10" y="287.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)..</text>
</g>
<g >
<title>decltype (__invoke((_S_declval&lt;0ul&gt;)())) std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#1}&gt; &gt;::_M_invoke&lt;0ul&gt;(std::_Index_tuple&lt;0ul&gt;) (561 samples, 6.49%)</title><rect x="2271.2" y="245" width="387.9" height="15.0" fill="rgb(208,156,36)" rx="2" ry="2" />
<text  x="2274.17" y="255.5" >decltype (__invoke((_S_declval&lt;0ul&gt;)())) std::thread..</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::sentry::~sentry() (16 samples, 0.19%)</title><rect x="1630.9" y="245" width="11.0" height="15.0" fill="rgb(231,115,42)" rx="2" ry="2" />
<text  x="1633.85" y="255.5" ></text>
</g>
<g >
<title>decltype (__invoke((_S_declval&lt;0ul&gt;)())) std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#3}&gt; &gt;::_M_invoke&lt;0ul&gt;(std::_Index_tuple&lt;0ul&gt;) (2,115 samples, 24.46%)</title><rect x="3256.5" y="245" width="1462.5" height="15.0" fill="rgb(224,94,0)" rx="2" ry="2" />
<text  x="3259.54" y="255.5" >decltype (__invoke((_S_declval&lt;0ul&gt;)())) std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#3}&gt; &gt;::_M_invoke&lt;0ul&gt;(std::_Index_tuple&lt;0ul&gt;)</text>
</g>
<g >
<title>runHackathon(int const*)::{lambda()#3}::operator()() const (2,115 samples, 24.46%)</title><rect x="3256.5" y="197" width="1462.5" height="15.0" fill="rgb(223,26,31)" rx="2" ry="2" />
<text  x="3259.54" y="207.5" >runHackathon(int const*)::{lambda()#3}::operator()() const</text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::lock() (57 samples, 0.66%)</title><rect x="2680.5" y="133" width="39.4" height="15.0" fill="rgb(245,159,51)" rx="2" ry="2" />
<text  x="2683.53" y="143.5" >std..</text>
</g>
<g >
<title>readFileLine(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int) (96 samples, 1.11%)</title><rect x="2879.7" y="165" width="66.4" height="15.0" fill="rgb(223,97,5)" rx="2" ry="2" />
<text  x="2882.68" y="175.5" >readFil..</text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; const&amp; std::use_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (17 samples, 0.20%)</title><rect x="1679.9" y="245" width="11.8" height="15.0" fill="rgb(219,164,39)" rx="2" ry="2" />
<text  x="1682.95" y="255.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::lock() (19 samples, 0.22%)</title><rect x="2318.9" y="133" width="13.1" height="15.0" fill="rgb(214,214,3)" rx="2" ry="2" />
<text  x="2321.88" y="143.5" ></text>
</g>
<g >
<title>EventQueue::dequeueEvent() (354 samples, 4.09%)</title><rect x="2284.3" y="165" width="244.8" height="15.0" fill="rgb(227,184,20)" rx="2" ry="2" />
<text  x="2287.31" y="175.5" >EventQueue::dequeueEvent()</text>
</g>
<g >
<title>std::_V2::condition_variable_any::notify_all() (18 samples, 0.21%)</title><rect x="2305.1" y="149" width="12.4" height="15.0" fill="rgb(246,129,9)" rx="2" ry="2" />
<text  x="2308.05" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (16 samples, 0.19%)</title><rect x="1700.7" y="261" width="11.1" height="15.0" fill="rgb(227,127,35)" rx="2" ry="2" />
<text  x="1703.69" y="271.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::_M_insert&lt;long&gt;(long) (22 samples, 0.25%)</title><rect x="1611.5" y="245" width="15.2" height="15.0" fill="rgb(241,108,48)" rx="2" ry="2" />
<text  x="1614.49" y="255.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unique_lock(std::mutex&amp;) (50 samples, 0.58%)</title><rect x="2480.0" y="117" width="34.6" height="15.0" fill="rgb(239,153,22)" rx="2" ry="2" />
<text  x="2483.00" y="127.5" >st..</text>
</g>
</g>
</svg>
