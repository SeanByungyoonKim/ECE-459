<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="6000" height="374" onload="init(evt)" viewBox="0 0 6000 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="6000.0" height="374.0" fill="url(#background)"  />
<text id="title" x="3000.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="357" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="5890.00" y="24" >Search</text>
<text id="matched" x="5890.00" y="357" > </text>
<g id="frames">
<g >
<title>__strcmp_sse2_unaligned (60 samples, 0.67%)</title><rect x="805.9" y="277" width="40.1" height="15.0" fill="rgb(245,111,17)" rx="2" ry="2" />
<text  x="808.86" y="287.5" >__s..</text>
</g>
<g >
<title>bool std::has_facet&lt;std::ctype&lt;char&gt; &gt;(std::locale const&amp;) (47 samples, 0.53%)</title><rect x="138.5" y="261" width="31.5" height="15.0" fill="rgb(231,192,41)" rx="2" ry="2" />
<text  x="141.52" y="271.5" >bo..</text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, char) (106 samples, 1.19%)</title><rect x="1301.2" y="277" width="70.9" height="15.0" fill="rgb(226,58,26)" rx="2" ry="2" />
<text  x="1304.18" y="287.5" >std::bas..</text>
</g>
<g >
<title>decltype (__invoke((_S_declval&lt;0ul&gt;)())) std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#2}&gt; &gt;::_M_invoke&lt;0ul&gt;(std::_Index_tuple&lt;0ul&gt;) (946 samples, 10.59%)</title><rect x="2466.5" y="245" width="633.2" height="15.0" fill="rgb(219,54,10)" rx="2" ry="2" />
<text  x="2469.53" y="255.5" >decltype (__invoke((_S_declval&lt;0ul&gt;)())) std::thread::_Invoker&lt;std::tuple&lt;runHackathon(..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#1}&gt; &gt; &gt;::_M_run() (473 samples, 5.29%)</title><rect x="2149.9" y="277" width="316.6" height="15.0" fill="rgb(243,103,6)" rx="2" ry="2" />
<text  x="2152.92" y="287.5" >std::thread::_State_impl&lt;std::thread::_Inv..</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::operator&lt;&lt;(std::ios_base&amp; (*)(std::ios_base&amp;)) (34 samples, 0.38%)</title><rect x="2593.0" y="133" width="22.8" height="15.0" fill="rgb(236,117,22)" rx="2" ry="2" />
<text  x="2596.03" y="143.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string()@plt (53 samples, 0.59%)</title><rect x="4152.6" y="101" width="35.5" height="15.0" fill="rgb(212,183,17)" rx="2" ry="2" />
<text  x="4155.63" y="111.5" >std..</text>
</g>
<g >
<title>std::_V2::condition_variable_any::_Unlock&lt;std::unique_lock&lt;std::recursive_mutex&gt; &gt;::~_Unlock() (74 samples, 0.83%)</title><rect x="2259.0" y="117" width="49.6" height="15.0" fill="rgb(225,153,14)" rx="2" ry="2" />
<text  x="2262.03" y="127.5" >std:..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (91 samples, 1.02%)</title><rect x="707.5" y="261" width="60.9" height="15.0" fill="rgb(217,192,26)" rx="2" ry="2" />
<text  x="710.47" y="271.5" >[[kern..</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, runHackathon(int const*)::{lambda()#1}&gt;(std::__invoke_other, runHackathon(int const*)::{lambda()#1}&amp;&amp;) (473 samples, 5.29%)</title><rect x="2149.9" y="213" width="316.6" height="15.0" fill="rgb(247,219,21)" rx="2" ry="2" />
<text  x="2152.92" y="223.5" >void std::__invoke_impl&lt;void, runHackathon..</text>
</g>
<g >
<title>bool std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (25 samples, 0.28%)</title><rect x="1523.4" y="245" width="16.7" height="15.0" fill="rgb(238,144,2)" rx="2" ry="2" />
<text  x="1526.41" y="255.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; const&amp; std::use_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (32 samples, 0.36%)</title><rect x="362.7" y="261" width="21.5" height="15.0" fill="rgb(217,74,45)" rx="2" ry="2" />
<text  x="365.75" y="271.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (18 samples, 0.20%)</title><rect x="1289.1" y="261" width="12.1" height="15.0" fill="rgb(248,142,44)" rx="2" ry="2" />
<text  x="1292.13" y="271.5" ></text>
</g>
<g >
<title>runHackathon(int const*)::{lambda()#1}::operator()() const (473 samples, 5.29%)</title><rect x="2149.9" y="197" width="316.6" height="15.0" fill="rgb(242,21,9)" rx="2" ry="2" />
<text  x="2152.92" y="207.5" >runHackathon(int const*)::{lambda()#1}::op..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#2}&gt; &gt; &gt;::_M_run() (946 samples, 10.59%)</title><rect x="2466.5" y="277" width="633.2" height="15.0" fill="rgb(238,117,7)" rx="2" ry="2" />
<text  x="2469.53" y="287.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{la..</text>
</g>
<g >
<title>std::recursive_mutex::lock() (23 samples, 0.26%)</title><rect x="2692.1" y="117" width="15.4" height="15.0" fill="rgb(243,208,3)" rx="2" ry="2" />
<text  x="2695.10" y="127.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::lock() (24 samples, 0.27%)</title><rect x="2691.4" y="133" width="16.1" height="15.0" fill="rgb(242,195,0)" rx="2" ry="2" />
<text  x="2694.43" y="143.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (25 samples, 0.28%)</title><rect x="768.4" y="277" width="16.7" height="15.0" fill="rgb(212,92,20)" rx="2" ry="2" />
<text  x="771.38" y="287.5" ></text>
</g>
<g >
<title>__libc_start_main (51 samples, 0.57%)</title><rect x="658.6" y="277" width="34.1" height="15.0" fill="rgb(227,66,23)" rx="2" ry="2" />
<text  x="661.60" y="287.5" >__..</text>
</g>
<g >
<title>Student::run() (472 samples, 5.28%)</title><rect x="2150.6" y="181" width="315.9" height="15.0" fill="rgb(247,149,41)" rx="2" ry="2" />
<text  x="2153.59" y="191.5" >Student::run()</text>
</g>
<g >
<title>[[kernel.kallsyms]] (16 samples, 0.18%)</title><rect x="2694.8" y="69" width="10.7" height="15.0" fill="rgb(220,159,18)" rx="2" ry="2" />
<text  x="2697.78" y="79.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::unique_lock(std::recursive_mutex&amp;) (24 samples, 0.27%)</title><rect x="2691.4" y="149" width="16.1" height="15.0" fill="rgb(208,182,20)" rx="2" ry="2" />
<text  x="2694.43" y="159.5" ></text>
</g>
<g >
<title>EventQueue::enqueueEvent(Event, bool) (17 samples, 0.19%)</title><rect x="2368.1" y="165" width="11.4" height="15.0" fill="rgb(223,153,9)" rx="2" ry="2" />
<text  x="2371.13" y="175.5" ></text>
</g>
<g >
<title>crossProduct(Container&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Container&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;) (2,282 samples, 25.54%)</title><rect x="3102.4" y="149" width="1527.5" height="15.0" fill="rgb(254,112,0)" rx="2" ry="2" />
<text  x="3105.41" y="159.5" >crossProduct(Container&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, Container&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;)</text>
</g>
<g >
<title>Container&lt;Package*&gt;::push(Package*) (23 samples, 0.26%)</title><rect x="2151.3" y="165" width="15.4" height="15.0" fill="rgb(225,196,19)" rx="2" ry="2" />
<text  x="2154.26" y="175.5" ></text>
</g>
<g >
<title>memcpy@plt (62 samples, 0.69%)</title><rect x="5396.3" y="293" width="41.5" height="15.0" fill="rgb(206,100,44)" rx="2" ry="2" />
<text  x="5399.28" y="303.5" >mem..</text>
</g>
<g >
<title>std::__invoke_result&lt;runHackathon(int const*)::{lambda()#3}&gt;::type std::__invoke&lt;runHackathon(int const*)::{lambda()#3}&gt;(std::__invoke_result&amp;&amp;, (runHackathon(int const*)::{lambda()#3}&amp;&amp;)...) (2,291 samples, 25.64%)</title><rect x="3099.7" y="229" width="1533.5" height="15.0" fill="rgb(223,25,51)" rx="2" ry="2" />
<text  x="3102.73" y="239.5" >std::__invoke_result&lt;runHackathon(int const*)::{lambda()#3}&gt;::type std::__invoke&lt;runHackathon(int const*)::{lambda()#3}&gt;(std::__invoke_result&amp;&amp;, (runHackathon(int const*)::{lambda()#3}&amp;&amp;)...)</text>
</g>
<g >
<title>__pthread_mutex_lock (23 samples, 0.26%)</title><rect x="2293.2" y="53" width="15.4" height="15.0" fill="rgb(209,193,49)" rx="2" ry="2" />
<text  x="2296.16" y="63.5" ></text>
</g>
<g >
<title>std::thread::_M_start_thread(std::unique_ptr&lt;std::thread::_State, std::default_delete&lt;std::thread::_State&gt; &gt;, void (*)()) (51 samples, 0.57%)</title><rect x="658.6" y="229" width="34.1" height="15.0" fill="rgb(236,49,11)" rx="2" ry="2" />
<text  x="661.60" y="239.5" >st..</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init(std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;*) (15 samples, 0.17%)</title><rect x="5862.2" y="293" width="10.0" height="15.0" fill="rgb(233,8,43)" rx="2" ry="2" />
<text  x="5865.15" y="303.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt; const&amp; std::use_facet&lt;std::ctype&lt;char&gt; &gt;(std::locale const&amp;) (23 samples, 0.26%)</title><rect x="1599.7" y="245" width="15.4" height="15.0" fill="rgb(207,8,4)" rx="2" ry="2" />
<text  x="1602.71" y="255.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::unlock() (19 samples, 0.21%)</title><rect x="2246.3" y="101" width="12.7" height="15.0" fill="rgb(228,69,44)" rx="2" ry="2" />
<text  x="2249.31" y="111.5" ></text>
</g>
<g >
<title>StrPair::~StrPair() (126 samples, 1.41%)</title><rect x="3613.8" y="101" width="84.3" height="15.0" fill="rgb(247,155,29)" rx="2" ry="2" />
<text  x="3616.80" y="111.5" >StrPair::..</text>
</g>
<g >
<title>__dynamic_cast (109 samples, 1.22%)</title><rect x="4711.5" y="293" width="73.0" height="15.0" fill="rgb(229,65,40)" rx="2" ry="2" />
<text  x="4714.54" y="303.5" >__dynami..</text>
</g>
<g >
<title>bool std::has_facet&lt;std::ctype&lt;char&gt; &gt;(std::locale const&amp;) (24 samples, 0.27%)</title><rect x="1494.0" y="245" width="16.0" height="15.0" fill="rgb(243,13,4)" rx="2" ry="2" />
<text  x="1496.96" y="255.5" ></text>
</g>
<g >
<title>ChecksumTracker&lt;PackageDownloader, (ChecksumType)1&gt;::updateGlobalChecksum(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (291 samples, 3.26%)</title><rect x="2468.5" y="165" width="194.8" height="15.0" fill="rgb(211,198,37)" rx="2" ry="2" />
<text  x="2471.53" y="175.5" >ChecksumTracker&lt;PackageDo..</text>
</g>
<g >
<title>std::recursive_mutex::lock() (23 samples, 0.26%)</title><rect x="2194.1" y="117" width="15.4" height="15.0" fill="rgb(228,212,14)" rx="2" ry="2" />
<text  x="2197.10" y="127.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base() (15 samples, 0.17%)</title><rect x="1388.9" y="245" width="10.0" height="15.0" fill="rgb(221,60,43)" rx="2" ry="2" />
<text  x="1391.87" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf() (37 samples, 0.41%)</title><rect x="1204.1" y="277" width="24.8" height="15.0" fill="rgb(214,47,36)" rx="2" ry="2" />
<text  x="1207.13" y="287.5" >s..</text>
</g>
<g >
<title>void std::_V2::condition_variable_any::wait&lt;std::unique_lock&lt;std::recursive_mutex&gt;, EventQueue::dequeueEvent()::{lambda()#1}&gt;(std::unique_lock&lt;std::recursive_mutex&gt;&amp;, EventQueue::dequeueEvent()::{lambda()#1}) (233 samples, 2.61%)</title><rect x="2212.2" y="149" width="155.9" height="15.0" fill="rgb(230,61,4)" rx="2" ry="2" />
<text  x="2215.17" y="159.5" >void std::_V2::condi..</text>
</g>
<g >
<title>std::locale::~locale() (103 samples, 1.15%)</title><rect x="1882.8" y="261" width="69.0" height="15.0" fill="rgb(249,200,39)" rx="2" ry="2" />
<text  x="1885.85" y="271.5" >std::lo..</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, runHackathon(int const*)::{lambda()#2}&gt;(std::__invoke_other, runHackathon(int const*)::{lambda()#2}&amp;&amp;) (946 samples, 10.59%)</title><rect x="2466.5" y="213" width="633.2" height="15.0" fill="rgb(217,139,45)" rx="2" ry="2" />
<text  x="2469.53" y="223.5" >void std::__invoke_impl&lt;void, runHackathon(int const*)::{lambda()#2}&gt;(std::__invoke_oth..</text>
</g>
<g >
<title>std::locale::operator=(std::locale const&amp;) (250 samples, 2.80%)</title><rect x="1714.8" y="261" width="167.4" height="15.0" fill="rgb(232,54,30)" rx="2" ry="2" />
<text  x="1717.84" y="271.5" >std::locale::operator..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (40 samples, 0.45%)</title><rect x="1377.5" y="261" width="26.8" height="15.0" fill="rgb(241,180,8)" rx="2" ry="2" />
<text  x="1380.49" y="271.5" >[..</text>
</g>
<g >
<title>std::__invoke_result&lt;runHackathon(int const*)::{lambda()#2}&gt;::type std::__invoke&lt;runHackathon(int const*)::{lambda()#2}&gt;(std::__invoke_result&amp;&amp;, (runHackathon(int const*)::{lambda()#2}&amp;&amp;)...) (946 samples, 10.59%)</title><rect x="2466.5" y="229" width="633.2" height="15.0" fill="rgb(205,50,10)" rx="2" ry="2" />
<text  x="2469.53" y="239.5" >std::__invoke_result&lt;runHackathon(int const*)::{lambda()#2}&gt;::type std::__invoke&lt;runHac..</text>
</g>
<g >
<title>__clone (50 samples, 0.56%)</title><rect x="658.6" y="213" width="33.5" height="15.0" fill="rgb(249,156,8)" rx="2" ry="2" />
<text  x="661.60" y="223.5" >__..</text>
</g>
<g >
<title>__pthread_mutex_cond_lock (19 samples, 0.21%)</title><rect x="788.5" y="277" width="12.7" height="15.0" fill="rgb(247,201,33)" rx="2" ry="2" />
<text  x="791.46" y="287.5" ></text>
</g>
<g >
<title>std::_V2::condition_variable_any::_Unlock&lt;std::unique_lock&lt;std::recursive_mutex&gt; &gt;::_Unlock(std::unique_lock&lt;std::recursive_mutex&gt;&amp;) (19 samples, 0.21%)</title><rect x="2246.3" y="117" width="12.7" height="15.0" fill="rgb(227,7,39)" rx="2" ry="2" />
<text  x="2249.31" y="127.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#1}&gt; &gt;::operator()() (473 samples, 5.29%)</title><rect x="2149.9" y="261" width="316.6" height="15.0" fill="rgb(238,200,31)" rx="2" ry="2" />
<text  x="2152.92" y="271.5" >std::thread::_Invoker&lt;std::tuple&lt;runHackat..</text>
</g>
<g >
<title>std::locale::locale() (293 samples, 3.28%)</title><rect x="1953.8" y="261" width="196.1" height="15.0" fill="rgb(231,167,16)" rx="2" ry="2" />
<text  x="1956.80" y="271.5" >std::locale::locale()</text>
</g>
<g >
<title>Container&lt;StrPair&gt;::pushBack(StrPair) (2,146 samples, 24.02%)</title><rect x="3102.4" y="117" width="1436.4" height="15.0" fill="rgb(251,216,43)" rx="2" ry="2" />
<text  x="3105.41" y="127.5" >Container&lt;StrPair&gt;::pushBack(StrPair)</text>
</g>
<g >
<title>[[kernel.kallsyms]] (43 samples, 0.48%)</title><rect x="2503.3" y="85" width="28.8" height="15.0" fill="rgb(232,187,24)" rx="2" ry="2" />
<text  x="2506.34" y="95.5" >[[..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append(char const*, unsigned long) (99 samples, 1.11%)</title><rect x="5456.5" y="293" width="66.3" height="15.0" fill="rgb(215,27,20)" rx="2" ry="2" />
<text  x="5459.53" y="303.5" >std::__..</text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (293 samples, 3.28%)</title><rect x="1953.8" y="277" width="196.1" height="15.0" fill="rgb(207,189,42)" rx="2" ry="2" />
<text  x="1956.80" y="287.5" >[libstdc++.so.6.0.25]</text>
</g>
<g >
<title>bool std::has_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (19 samples, 0.21%)</title><rect x="1510.0" y="245" width="12.7" height="15.0" fill="rgb(212,12,6)" rx="2" ry="2" />
<text  x="1513.02" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (361 samples, 4.04%)</title><rect x="957.1" y="261" width="241.7" height="15.0" fill="rgb(211,167,54)" rx="2" ry="2" />
<text  x="960.13" y="271.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::unique_lock(std::recursive_mutex&amp;) (23 samples, 0.26%)</title><rect x="2194.1" y="149" width="15.4" height="15.0" fill="rgb(227,157,3)" rx="2" ry="2" />
<text  x="2197.10" y="159.5" ></text>
</g>
<g >
<title>Container&lt;Package*&gt;::pushBack(Package*) (19 samples, 0.21%)</title><rect x="2151.3" y="149" width="12.7" height="15.0" fill="rgb(225,88,5)" rx="2" ry="2" />
<text  x="2154.26" y="159.5" ></text>
</g>
<g >
<title>Student::buildIdea() (130 samples, 1.46%)</title><rect x="2379.5" y="165" width="87.0" height="15.0" fill="rgb(241,207,5)" rx="2" ry="2" />
<text  x="2382.51" y="175.5" >Student::b..</text>
</g>
<g >
<title>StrPair::operator=(StrPair const&amp;) (253 samples, 2.83%)</title><rect x="3444.5" y="101" width="169.3" height="15.0" fill="rgb(246,34,1)" rx="2" ry="2" />
<text  x="3447.45" y="111.5" >StrPair::operator=(St..</text>
</g>
<g >
<title>std::mutex::lock() (25 samples, 0.28%)</title><rect x="2673.4" y="117" width="16.7" height="15.0" fill="rgb(226,76,10)" rx="2" ry="2" />
<text  x="2676.36" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::empty() const@plt (20 samples, 0.22%)</title><rect x="2804.5" y="165" width="13.4" height="15.0" fill="rgb(211,131,22)" rx="2" ry="2" />
<text  x="2807.55" y="175.5" ></text>
</g>
<g >
<title>xorChecksum(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (191 samples, 2.14%)</title><rect x="2535.5" y="149" width="127.8" height="15.0" fill="rgb(228,192,20)" rx="2" ry="2" />
<text  x="2538.47" y="159.5" >xorChecksum(std:..</text>
</g>
<g >
<title>__gthread_recursive_mutex_unlock(pthread_mutex_t*) (17 samples, 0.19%)</title><rect x="2247.6" y="69" width="11.4" height="15.0" fill="rgb(217,201,32)" rx="2" ry="2" />
<text  x="2250.65" y="79.5" ></text>
</g>
<g >
<title>__lll_lock_wait (33 samples, 0.37%)</title><rect x="2332.7" y="69" width="22.0" height="15.0" fill="rgb(218,144,44)" rx="2" ry="2" />
<text  x="2335.66" y="79.5" >_..</text>
</g>
<g >
<title>runHackathon(int const*) (51 samples, 0.57%)</title><rect x="658.6" y="245" width="34.1" height="15.0" fill="rgb(219,188,54)" rx="2" ry="2" />
<text  x="661.60" y="255.5" >ru..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string() (282 samples, 3.16%)</title><rect x="3963.9" y="101" width="188.7" height="15.0" fill="rgb(223,97,28)" rx="2" ry="2" />
<text  x="3966.87" y="111.5" >std::__cxx11::basic_stri..</text>
</g>
<g >
<title>main (51 samples, 0.57%)</title><rect x="658.6" y="261" width="34.1" height="15.0" fill="rgb(252,56,34)" rx="2" ry="2" />
<text  x="661.60" y="271.5" >main</text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::sentry::sentry(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, bool) (75 samples, 0.84%)</title><rect x="3036.8" y="165" width="50.2" height="15.0" fill="rgb(217,64,0)" rx="2" ry="2" />
<text  x="3039.81" y="175.5" >std::..</text>
</g>
<g >
<title>__dynamic_cast (68 samples, 0.76%)</title><rect x="1446.4" y="245" width="45.5" height="15.0" fill="rgb(241,7,22)" rx="2" ry="2" />
<text  x="1449.43" y="255.5" >__dy..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (323 samples, 3.62%)</title><rect x="3713.5" y="101" width="216.2" height="15.0" fill="rgb(233,93,31)" rx="2" ry="2" />
<text  x="3716.53" y="111.5" >std::__cxx11::basic_string&lt;c..</text>
</g>
<g >
<title>malloc_consolidate (31 samples, 0.35%)</title><rect x="880.2" y="277" width="20.7" height="15.0" fill="rgb(232,206,8)" rx="2" ry="2" />
<text  x="883.16" y="287.5" ></text>
</g>
<g >
<title>hexStrToByte(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (23 samples, 0.26%)</title><rect x="2550.2" y="133" width="15.4" height="15.0" fill="rgb(233,117,40)" rx="2" ry="2" />
<text  x="2553.19" y="143.5" ></text>
</g>
<g >
<title>__GI___libc_open (291 samples, 3.26%)</title><rect x="415.6" y="277" width="194.8" height="15.0" fill="rgb(240,160,40)" rx="2" ry="2" />
<text  x="418.63" y="287.5" >__GI___libc_open</text>
</g>
<g >
<title>malloc (61 samples, 0.68%)</title><rect x="5344.1" y="293" width="40.8" height="15.0" fill="rgb(247,183,1)" rx="2" ry="2" />
<text  x="5347.07" y="303.5" >mal..</text>
</g>
<g >
<title>std::_V2::condition_variable_any::notify_all() (26 samples, 0.29%)</title><rect x="2673.4" y="149" width="17.4" height="15.0" fill="rgb(207,44,17)" rx="2" ry="2" />
<text  x="2676.36" y="159.5" ></text>
</g>
<g >
<title>__libc_disable_asynccancel (25 samples, 0.28%)</title><rect x="639.9" y="277" width="16.7" height="15.0" fill="rgb(217,221,43)" rx="2" ry="2" />
<text  x="642.86" y="287.5" ></text>
</g>
<g >
<title>Container&lt;StrPair&gt;::push(StrPair) (2,280 samples, 25.52%)</title><rect x="3102.4" y="133" width="1526.1" height="15.0" fill="rgb(215,137,19)" rx="2" ry="2" />
<text  x="3105.41" y="143.5" >Container&lt;StrPair&gt;::push(StrPair)</text>
</g>
<g >
<title>xorChecksum(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (98 samples, 1.10%)</title><rect x="2400.3" y="133" width="65.6" height="15.0" fill="rgb(243,221,35)" rx="2" ry="2" />
<text  x="2403.26" y="143.5" >xorChec..</text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; const&amp; std::use_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (41 samples, 0.46%)</title><rect x="334.0" y="261" width="27.4" height="15.0" fill="rgb(219,119,35)" rx="2" ry="2" />
<text  x="336.97" y="271.5" >s..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#2}&gt; &gt;::operator()() (946 samples, 10.59%)</title><rect x="2466.5" y="261" width="633.2" height="15.0" fill="rgb(239,226,20)" rx="2" ry="2" />
<text  x="2469.53" y="271.5" >std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#2}&gt; &gt;::operator()()</text>
</g>
<g >
<title>[[kernel.kallsyms]] (35 samples, 0.39%)</title><rect x="2269.7" y="37" width="23.5" height="15.0" fill="rgb(246,177,12)" rx="2" ry="2" />
<text  x="2272.74" y="47.5" >[..</text>
</g>
<g >
<title>std::mutex::lock() (54 samples, 0.60%)</title><rect x="2498.0" y="117" width="36.1" height="15.0" fill="rgb(245,198,14)" rx="2" ry="2" />
<text  x="2500.99" y="127.5" >std..</text>
</g>
<g >
<title>sha256(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (30 samples, 0.34%)</title><rect x="2775.1" y="165" width="20.1" height="15.0" fill="rgb(220,163,5)" rx="2" ry="2" />
<text  x="2778.10" y="175.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;) (18 samples, 0.20%)</title><rect x="1289.1" y="245" width="12.1" height="15.0" fill="rgb(206,48,2)" rx="2" ry="2" />
<text  x="1292.13" y="255.5" ></text>
</g>
<g >
<title>__lll_lock_wait (25 samples, 0.28%)</title><rect x="2673.4" y="101" width="16.7" height="15.0" fill="rgb(216,108,24)" rx="2" ry="2" />
<text  x="2676.36" y="111.5" ></text>
</g>
<g >
<title>bool std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (52 samples, 0.58%)</title><rect x="204.1" y="261" width="34.8" height="15.0" fill="rgb(207,16,15)" rx="2" ry="2" />
<text  x="207.11" y="271.5" >bo..</text>
</g>
<g >
<title>Container&lt;Event&gt;::popFront() (24 samples, 0.27%)</title><rect x="2167.3" y="149" width="16.1" height="15.0" fill="rgb(237,130,49)" rx="2" ry="2" />
<text  x="2170.32" y="159.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::lock() (23 samples, 0.26%)</title><rect x="2194.1" y="133" width="15.4" height="15.0" fill="rgb(225,43,20)" rx="2" ry="2" />
<text  x="2197.10" y="143.5" ></text>
</g>
<g >
<title>std::locale::~locale() (59 samples, 0.66%)</title><rect x="2623.2" y="133" width="39.4" height="15.0" fill="rgb(220,0,8)" rx="2" ry="2" />
<text  x="2626.15" y="143.5" >std..</text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unique_lock(std::mutex&amp;) (41 samples, 0.46%)</title><rect x="2330.6" y="117" width="27.5" height="15.0" fill="rgb(229,55,50)" rx="2" ry="2" />
<text  x="2333.65" y="127.5" >s..</text>
</g>
<g >
<title>std::__numpunct_cache&lt;char&gt;::~__numpunct_cache() (88 samples, 0.99%)</title><rect x="1228.9" y="277" width="58.9" height="15.0" fill="rgb(213,218,41)" rx="2" ry="2" />
<text  x="1231.89" y="287.5" >std::_..</text>
</g>
<g >
<title>_int_malloc (17 samples, 0.19%)</title><rect x="849.4" y="277" width="11.3" height="15.0" fill="rgb(209,92,54)" rx="2" ry="2" />
<text  x="852.37" y="287.5" ></text>
</g>
<g >
<title>std::mutex::lock() (38 samples, 0.43%)</title><rect x="2332.7" y="85" width="25.4" height="15.0" fill="rgb(230,0,37)" rx="2" ry="2" />
<text  x="2335.66" y="95.5" >s..</text>
</g>
<g >
<title>StrPair::operator=(StrPair const&amp;) (44 samples, 0.49%)</title><rect x="4571.0" y="117" width="29.4" height="15.0" fill="rgb(251,2,45)" rx="2" ry="2" />
<text  x="4573.97" y="127.5" >St..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string() (275 samples, 3.08%)</title><rect x="4318.0" y="101" width="184.0" height="15.0" fill="rgb(252,5,53)" rx="2" ry="2" />
<text  x="4320.96" y="111.5" >std::__cxx11::basic_str..</text>
</g>
<g >
<title>hackathon_slow (8,934 samples, 100.00%)</title><rect x="10.0" y="309" width="5980.0" height="15.0" fill="rgb(228,136,30)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >hackathon_slow</text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard(std::mutex&amp;) (25 samples, 0.28%)</title><rect x="2673.4" y="133" width="16.7" height="15.0" fill="rgb(224,78,18)" rx="2" ry="2" />
<text  x="2676.36" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20 samples, 0.22%)</title><rect x="2676.7" y="85" width="13.4" height="15.0" fill="rgb(244,41,35)" rx="2" ry="2" />
<text  x="2679.70" y="95.5" ></text>
</g>
<g >
<title>__gthread_recursive_mutex_lock(pthread_mutex_t*) (23 samples, 0.26%)</title><rect x="2692.1" y="101" width="15.4" height="15.0" fill="rgb(247,222,21)" rx="2" ry="2" />
<text  x="2695.10" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)@plt (51 samples, 0.57%)</title><rect x="3929.7" y="101" width="34.2" height="15.0" fill="rgb(249,182,31)" rx="2" ry="2" />
<text  x="3932.73" y="111.5" >st..</text>
</g>
<g >
<title>std::ios_base::~ios_base() (40 samples, 0.45%)</title><rect x="1377.5" y="277" width="26.8" height="15.0" fill="rgb(213,75,35)" rx="2" ry="2" />
<text  x="1380.49" y="287.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (28 samples, 0.31%)</title><rect x="1406.9" y="261" width="18.8" height="15.0" fill="rgb(234,83,10)" rx="2" ry="2" />
<text  x="1409.94" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (88 samples, 0.99%)</title><rect x="1228.9" y="261" width="58.9" height="15.0" fill="rgb(222,67,4)" rx="2" ry="2" />
<text  x="1231.89" y="271.5" >[[kern..</text>
</g>
<g >
<title>std::__invoke_result&lt;runHackathon(int const*)::{lambda()#1}&gt;::type std::__invoke&lt;runHackathon(int const*)::{lambda()#1}&gt;(std::__invoke_result&amp;&amp;, (runHackathon(int const*)::{lambda()#1}&amp;&amp;)...) (473 samples, 5.29%)</title><rect x="2149.9" y="229" width="316.6" height="15.0" fill="rgb(227,152,8)" rx="2" ry="2" />
<text  x="2152.92" y="239.5" >std::__invoke_result&lt;runHackathon(int cons..</text>
</g>
<g >
<title>Student::getPackagesChecksum[abi:cxx11]() (117 samples, 1.31%)</title><rect x="2387.5" y="149" width="78.4" height="15.0" fill="rgb(227,132,10)" rx="2" ry="2" />
<text  x="2390.54" y="159.5" >Student::..</text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, char) (148 samples, 1.66%)</title><rect x="2926.4" y="165" width="99.0" height="15.0" fill="rgb(230,126,39)" rx="2" ry="2" />
<text  x="2929.37" y="175.5" >std::basic_..</text>
</g>
<g >
<title>all (8,934 samples, 100%)</title><rect x="10.0" y="325" width="5980.0" height="15.0" fill="rgb(250,216,8)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator=(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (134 samples, 1.50%)</title><rect x="4188.1" y="101" width="89.7" height="15.0" fill="rgb(254,129,31)" rx="2" ry="2" />
<text  x="4191.10" y="111.5" >std::__cxx..</text>
</g>
<g >
<title>std::recursive_mutex::unlock() (17 samples, 0.19%)</title><rect x="2247.6" y="85" width="11.4" height="15.0" fill="rgb(219,38,3)" rx="2" ry="2" />
<text  x="2250.65" y="95.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, runHackathon(int const*)::{lambda()#3}&gt;(std::__invoke_other, runHackathon(int const*)::{lambda()#3}&amp;&amp;) (2,291 samples, 25.64%)</title><rect x="3099.7" y="213" width="1533.5" height="15.0" fill="rgb(211,31,50)" rx="2" ry="2" />
<text  x="3102.73" y="223.5" >void std::__invoke_impl&lt;void, runHackathon(int const*)::{lambda()#3}&gt;(std::__invoke_other, runHackathon(int const*)::{lambda()#3}&amp;&amp;)</text>
</g>
<g >
<title>void std::_V2::condition_variable_any::wait&lt;std::unique_lock&lt;std::recursive_mutex&gt; &gt;(std::unique_lock&lt;std::recursive_mutex&gt;&amp;) (205 samples, 2.29%)</title><rect x="2230.9" y="133" width="137.2" height="15.0" fill="rgb(233,113,44)" rx="2" ry="2" />
<text  x="2233.91" y="143.5" >void std::_V2::co..</text>
</g>
<g >
<title>decltype (__invoke((_S_declval&lt;0ul&gt;)())) std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#3}&gt; &gt;::_M_invoke&lt;0ul&gt;(std::_Index_tuple&lt;0ul&gt;) (2,291 samples, 25.64%)</title><rect x="3099.7" y="245" width="1533.5" height="15.0" fill="rgb(209,71,41)" rx="2" ry="2" />
<text  x="3102.73" y="255.5" >decltype (__invoke((_S_declval&lt;0ul&gt;)())) std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#3}&gt; &gt;::_M_invoke&lt;0ul&gt;(std::_Index_tuple&lt;0ul&gt;)</text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (50 samples, 0.56%)</title><rect x="1668.0" y="261" width="33.5" height="15.0" fill="rgb(236,38,44)" rx="2" ry="2" />
<text  x="1670.99" y="271.5" >[l..</text>
</g>
<g >
<title>pthread_cond_broadcast@@GLIBC_2.3.2 (19 samples, 0.21%)</title><rect x="5440.5" y="293" width="12.7" height="15.0" fill="rgb(240,169,45)" rx="2" ry="2" />
<text  x="5443.46" y="303.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::_M_insert&lt;long&gt;(long) (35 samples, 0.39%)</title><rect x="1560.2" y="245" width="23.4" height="15.0" fill="rgb(254,134,10)" rx="2" ry="2" />
<text  x="1563.22" y="255.5" >s..</text>
</g>
<g >
<title>std::locale::~locale() (32 samples, 0.36%)</title><rect x="2443.1" y="117" width="21.4" height="15.0" fill="rgb(209,49,40)" rx="2" ry="2" />
<text  x="2446.10" y="127.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (275 samples, 3.08%)</title><rect x="426.3" y="261" width="184.1" height="15.0" fill="rgb(213,191,25)" rx="2" ry="2" />
<text  x="429.34" y="271.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>std::ios_base::setf(std::_Ios_Fmtflags, std::_Ios_Fmtflags) (24 samples, 0.27%)</title><rect x="2597.0" y="101" width="16.1" height="15.0" fill="rgb(216,77,38)" rx="2" ry="2" />
<text  x="2600.05" y="111.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::operator bool() const (48 samples, 0.54%)</title><rect x="2818.6" y="165" width="32.1" height="15.0" fill="rgb(250,97,52)" rx="2" ry="2" />
<text  x="2821.61" y="175.5" >st..</text>
</g>
<g >
<title>bool std::has_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;(std::locale const&amp;) (47 samples, 0.53%)</title><rect x="171.3" y="261" width="31.5" height="15.0" fill="rgb(209,41,23)" rx="2" ry="2" />
<text  x="174.31" y="271.5" >bo..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (46 samples, 0.51%)</title><rect x="661.3" y="197" width="30.8" height="15.0" fill="rgb(212,94,11)" rx="2" ry="2" />
<text  x="664.28" y="207.5" >[[..</text>
</g>
<g >
<title>EventQueue::dequeueEvent() (301 samples, 3.37%)</title><rect x="2166.7" y="165" width="201.4" height="15.0" fill="rgb(242,0,9)" rx="2" ry="2" />
<text  x="2169.66" y="175.5" >EventQueue::dequeueEvent()</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#3}&gt; &gt; &gt;::_M_run() (2,291 samples, 25.64%)</title><rect x="3099.7" y="277" width="1533.5" height="15.0" fill="rgb(240,51,44)" rx="2" ry="2" />
<text  x="3102.73" y="287.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#3}&gt; &gt; &gt;::_M_run()</text>
</g>
<g >
<title>__memchr_avx2 (157 samples, 1.76%)</title><rect x="4785.8" y="293" width="105.1" height="15.0" fill="rgb(241,86,46)" rx="2" ry="2" />
<text  x="4788.83" y="303.5" >__memchr_avx2</text>
</g>
<g >
<title>std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;unsigned int&gt;(std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::ios_base&amp;, std::_Ios_Iostate&amp;, unsigned int&amp;) const (75 samples, 0.84%)</title><rect x="1237.6" y="245" width="50.2" height="15.0" fill="rgb(248,14,19)" rx="2" ry="2" />
<text  x="1240.59" y="255.5" >std::..</text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::sentry::sentry(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, bool) (29 samples, 0.32%)</title><rect x="5956.5" y="293" width="19.4" height="15.0" fill="rgb(215,199,16)" rx="2" ry="2" />
<text  x="5959.53" y="303.5" ></text>
</g>
<g >
<title>std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ifstream() (18 samples, 0.20%)</title><rect x="1289.1" y="277" width="12.1" height="15.0" fill="rgb(250,132,32)" rx="2" ry="2" />
<text  x="1292.13" y="287.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#3}&gt; &gt;::operator()() (2,291 samples, 25.64%)</title><rect x="3099.7" y="261" width="1533.5" height="15.0" fill="rgb(230,139,51)" rx="2" ry="2" />
<text  x="3102.73" y="271.5" >std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#3}&gt; &gt;::operator()()</text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unique_lock(std::mutex&amp;) (55 samples, 0.62%)</title><rect x="2497.3" y="149" width="36.8" height="15.0" fill="rgb(236,5,41)" rx="2" ry="2" />
<text  x="2500.32" y="159.5" >std..</text>
</g>
<g >
<title>PackageDownloader::run() (942 samples, 10.54%)</title><rect x="2466.5" y="181" width="630.6" height="15.0" fill="rgb(226,186,44)" rx="2" ry="2" />
<text  x="2469.53" y="191.5" >PackageDownloader::run()</text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::lock() (55 samples, 0.62%)</title><rect x="2497.3" y="133" width="36.8" height="15.0" fill="rgb(244,215,34)" rx="2" ry="2" />
<text  x="2500.32" y="143.5" >std..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (568 samples, 6.36%)</title><rect x="11.3" y="277" width="380.2" height="15.0" fill="rgb(246,211,13)" rx="2" ry="2" />
<text  x="14.34" y="287.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>__lll_lock_wait (17 samples, 0.19%)</title><rect x="2194.8" y="85" width="11.3" height="15.0" fill="rgb(248,181,36)" rx="2" ry="2" />
<text  x="2197.77" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (307 samples, 3.44%)</title><rect x="1445.8" y="261" width="205.5" height="15.0" fill="rgb(207,35,27)" rx="2" ry="2" />
<text  x="1448.76" y="271.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>StrPair::StrPair() (47 samples, 0.53%)</title><rect x="4538.8" y="117" width="31.5" height="15.0" fill="rgb(212,175,36)" rx="2" ry="2" />
<text  x="4541.84" y="127.5" >St..</text>
</g>
<g >
<title>__lll_lock_wait (45 samples, 0.50%)</title><rect x="2263.0" y="53" width="30.2" height="15.0" fill="rgb(250,156,31)" rx="2" ry="2" />
<text  x="2266.04" y="63.5" >__..</text>
</g>
<g >
<title>__gthread_recursive_mutex_lock(pthread_mutex_t*) (22 samples, 0.25%)</title><rect x="2194.8" y="101" width="14.7" height="15.0" fill="rgb(210,193,20)" rx="2" ry="2" />
<text  x="2197.77" y="111.5" ></text>
</g>
<g >
<title>runHackathon(int const*)::{lambda()#3}::operator()() const (2,291 samples, 25.64%)</title><rect x="3099.7" y="197" width="1533.5" height="15.0" fill="rgb(206,75,0)" rx="2" ry="2" />
<text  x="3102.73" y="207.5" >runHackathon(int const*)::{lambda()#3}::operator()() const</text>
</g>
<g >
<title>malloc (24 samples, 0.27%)</title><rect x="864.1" y="277" width="16.1" height="15.0" fill="rgb(206,214,18)" rx="2" ry="2" />
<text  x="867.09" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (30 samples, 0.34%)</title><rect x="2334.7" y="53" width="20.0" height="15.0" fill="rgb(246,70,7)" rx="2" ry="2" />
<text  x="2337.66" y="63.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string()@plt (55 samples, 0.62%)</title><rect x="4502.0" y="101" width="36.8" height="15.0" fill="rgb(211,134,44)" rx="2" ry="2" />
<text  x="4505.03" y="111.5" >std..</text>
</g>
<g >
<title>StrPair::StrPair() (114 samples, 1.28%)</title><rect x="3368.1" y="101" width="76.4" height="15.0" fill="rgb(223,199,40)" rx="2" ry="2" />
<text  x="3371.14" y="111.5" >StrPair:..</text>
</g>
<g >
<title>__dynamic_cast (152 samples, 1.70%)</title><rect x="25.4" y="261" width="101.7" height="15.0" fill="rgb(231,142,20)" rx="2" ry="2" />
<text  x="28.40" y="271.5" >__dynamic_cast</text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&amp;) const (44 samples, 0.49%)</title><rect x="610.4" y="277" width="29.5" height="15.0" fill="rgb(238,208,13)" rx="2" ry="2" />
<text  x="613.41" y="287.5" >__..</text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::~num_put() (27 samples, 0.30%)</title><rect x="1425.7" y="277" width="18.1" height="15.0" fill="rgb(253,39,3)" rx="2" ry="2" />
<text  x="1428.68" y="287.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, char)@plt (17 samples, 0.19%)</title><rect x="3025.4" y="165" width="11.4" height="15.0" fill="rgb(221,106,29)" rx="2" ry="2" />
<text  x="3028.44" y="175.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, char) (126 samples, 1.41%)</title><rect x="5872.2" y="293" width="84.3" height="15.0" fill="rgb(230,219,34)" rx="2" ry="2" />
<text  x="5875.19" y="303.5" >std::basi..</text>
</g>
<g >
<title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::~num_get() (28 samples, 0.31%)</title><rect x="1406.9" y="277" width="18.8" height="15.0" fill="rgb(235,63,43)" rx="2" ry="2" />
<text  x="1409.94" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,459 samples, 27.52%)</title><rect x="10.0" y="293" width="1645.9" height="15.0" fill="rgb(251,68,36)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (37 samples, 0.41%)</title><rect x="1204.1" y="261" width="24.8" height="15.0" fill="rgb(232,135,17)" rx="2" ry="2" />
<text  x="1207.13" y="271.5" >[..</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (75 samples, 0.84%)</title><rect x="5291.2" y="293" width="50.2" height="15.0" fill="rgb(214,224,49)" rx="2" ry="2" />
<text  x="5294.20" y="303.5" >cfree..</text>
</g>
<g >
<title>std::locale::id::_M_id() const (21 samples, 0.24%)</title><rect x="307.2" y="261" width="14.0" height="15.0" fill="rgb(236,50,14)" rx="2" ry="2" />
<text  x="310.19" y="271.5" ></text>
</g>
<g >
<title>readFileLine(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int) (97 samples, 1.09%)</title><rect x="2710.2" y="165" width="64.9" height="15.0" fill="rgb(238,61,2)" rx="2" ry="2" />
<text  x="2713.17" y="175.5" >readFil..</text>
</g>
<g >
<title>decltype (__invoke((_S_declval&lt;0ul&gt;)())) std::thread::_Invoker&lt;std::tuple&lt;runHackathon(int const*)::{lambda()#1}&gt; &gt;::_M_invoke&lt;0ul&gt;(std::_Index_tuple&lt;0ul&gt;) (473 samples, 5.29%)</title><rect x="2149.9" y="245" width="316.6" height="15.0" fill="rgb(213,28,3)" rx="2" ry="2" />
<text  x="2152.92" y="255.5" >decltype (__invoke((_S_declval&lt;0ul&gt;)())) s..</text>
</g>
<g >
<title>IdeaGenerator::getNextIdea[abi:cxx11](int) (2,288 samples, 25.61%)</title><rect x="3101.1" y="165" width="1531.5" height="15.0" fill="rgb(243,206,49)" rx="2" ry="2" />
<text  x="3104.07" y="175.5" >IdeaGenerator::getNextIdea[abi:cxx11](int)</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale(std::locale const&amp;) (18 samples, 0.20%)</title><rect x="256.3" y="261" width="12.1" height="15.0" fill="rgb(240,107,41)" rx="2" ry="2" />
<text  x="259.32" y="271.5" ></text>
</g>
<g >
<title>virtual thunk to std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringstream() (307 samples, 3.44%)</title><rect x="1445.8" y="277" width="205.5" height="15.0" fill="rgb(224,28,13)" rx="2" ry="2" />
<text  x="1448.76" y="287.5" >virtual thunk to std::__cxx..</text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&amp;) const (28 samples, 0.31%)</title><rect x="1406.9" y="245" width="18.8" height="15.0" fill="rgb(227,9,49)" rx="2" ry="2" />
<text  x="1409.94" y="255.5" ></text>
</g>
<g >
<title>__lll_lock_wait (20 samples, 0.22%)</title><rect x="2692.1" y="85" width="13.4" height="15.0" fill="rgb(249,124,46)" rx="2" ry="2" />
<text  x="2695.10" y="95.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (531 samples, 5.94%)</title><rect x="4890.9" y="293" width="355.4" height="15.0" fill="rgb(209,82,14)" rx="2" ry="2" />
<text  x="4893.92" y="303.5" >__memmove_avx_unaligned_erms</text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&amp;) const (39 samples, 0.44%)</title><rect x="4655.3" y="293" width="26.1" height="15.0" fill="rgb(226,74,9)" rx="2" ry="2" />
<text  x="4658.31" y="303.5" >_..</text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::lock() (41 samples, 0.46%)</title><rect x="2330.6" y="101" width="27.5" height="15.0" fill="rgb(218,155,29)" rx="2" ry="2" />
<text  x="2333.65" y="111.5" >s..</text>
</g>
<g >
<title>__gthread_recursive_mutex_lock(pthread_mutex_t*) (71 samples, 0.79%)</title><rect x="2261.0" y="69" width="47.6" height="15.0" fill="rgb(252,63,36)" rx="2" ry="2" />
<text  x="2264.03" y="79.5" >__gt..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (432 samples, 4.84%)</title><rect x="1664.6" y="277" width="289.2" height="15.0" fill="rgb(216,40,24)" rx="2" ry="2" />
<text  x="1667.64" y="287.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>std::unique_lock&lt;std::recursive_mutex&gt;::lock() (73 samples, 0.82%)</title><rect x="2259.7" y="101" width="48.9" height="15.0" fill="rgb(238,84,5)" rx="2" ry="2" />
<text  x="2262.70" y="111.5" >std:..</text>
</g>
<g >
<title>runHackathon(int const*)::{lambda()#2}::operator()() const (946 samples, 10.59%)</title><rect x="2466.5" y="197" width="633.2" height="15.0" fill="rgb(215,5,7)" rx="2" ry="2" />
<text  x="2469.53" y="207.5" >runHackathon(int const*)::{lambda()#2}::operator()() const</text>
</g>
<g >
<title>IdeaGenerator::run() (2,291 samples, 25.64%)</title><rect x="3099.7" y="181" width="1533.5" height="15.0" fill="rgb(242,174,18)" rx="2" ry="2" />
<text  x="3102.73" y="191.5" >IdeaGenerator::run()</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator=(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)@plt (60 samples, 0.67%)</title><rect x="4277.8" y="101" width="40.2" height="15.0" fill="rgb(243,114,28)" rx="2" ry="2" />
<text  x="4280.79" y="111.5" >std..</text>
</g>
<g >
<title>StrPair::~StrPair() (39 samples, 0.44%)</title><rect x="4600.4" y="117" width="26.1" height="15.0" fill="rgb(247,124,5)" rx="2" ry="2" />
<text  x="4603.42" y="127.5" >S..</text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&amp;) const (27 samples, 0.30%)</title><rect x="1425.7" y="245" width="18.1" height="15.0" fill="rgb(247,182,26)" rx="2" ry="2" />
<text  x="1428.68" y="255.5" ></text>
</g>
<g >
<title>_int_malloc (50 samples, 0.56%)</title><rect x="5253.0" y="293" width="33.5" height="15.0" fill="rgb(252,14,35)" rx="2" ry="2" />
<text  x="5256.04" y="303.5" >_i..</text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;) (91 samples, 1.02%)</title><rect x="2858.1" y="165" width="60.9" height="15.0" fill="rgb(224,80,14)" rx="2" ry="2" />
<text  x="2861.10" y="175.5" >std::b..</text>
</g>
<g >
<title>__lll_lock_wait (113 samples, 1.26%)</title><rect x="692.7" y="277" width="75.7" height="15.0" fill="rgb(232,25,39)" rx="2" ry="2" />
<text  x="695.74" y="287.5" >__lll_lo..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (434 samples, 4.86%)</title><rect x="5531.5" y="293" width="290.5" height="15.0" fill="rgb(243,222,24)" rx="2" ry="2" />
<text  x="5534.49" y="303.5" >std::__cxx11::basic_string&lt;char, std::c..</text>
</g>
<g >
<title>__lll_lock_wait (50 samples, 0.56%)</title><rect x="2498.7" y="101" width="33.4" height="15.0" fill="rgb(219,165,6)" rx="2" ry="2" />
<text  x="2501.65" y="111.5" >__..</text>
</g>
<g >
<title>pthread_cond_wait@@GLIBC_2.3.2 (445 samples, 4.98%)</title><rect x="900.9" y="277" width="297.9" height="15.0" fill="rgb(237,154,8)" rx="2" ry="2" />
<text  x="903.91" y="287.5" >pthread_cond_wait@@GLIBC_2.3.2</text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&amp;) const (45 samples, 0.50%)</title><rect x="4681.4" y="293" width="30.1" height="15.0" fill="rgb(247,216,39)" rx="2" ry="2" />
<text  x="4684.41" y="303.5" >__..</text>
</g>
<g >
<title>std::hex(std::ios_base&amp;) (27 samples, 0.30%)</title><rect x="2597.0" y="117" width="18.1" height="15.0" fill="rgb(243,8,53)" rx="2" ry="2" />
<text  x="2600.05" y="127.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id() const@plt (18 samples, 0.20%)</title><rect x="321.2" y="261" width="12.1" height="15.0" fill="rgb(250,162,38)" rx="2" ry="2" />
<text  x="324.25" y="271.5" ></text>
</g>
<g >
<title>EventQueue::enqueueEvent(Event, bool) (66 samples, 0.74%)</title><rect x="2664.7" y="165" width="44.1" height="15.0" fill="rgb(210,24,2)" rx="2" ry="2" />
<text  x="2667.65" y="175.5" >Even..</text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt;(std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::ios_base&amp;, char, long) const (15 samples, 0.17%)</title><rect x="1573.6" y="229" width="10.0" height="15.0" fill="rgb(207,24,45)" rx="2" ry="2" />
<text  x="1576.61" y="239.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (4,443 samples, 49.73%)</title><rect x="1659.3" y="293" width="2973.9" height="15.0" fill="rgb(246,73,53)" rx="2" ry="2" />
<text  x="1662.29" y="303.5" >[libstdc++.so.6.0.25]</text>
</g>
<g >
<title>std::recursive_mutex::lock() (72 samples, 0.81%)</title><rect x="2260.4" y="85" width="48.2" height="15.0" fill="rgb(249,79,40)" rx="2" ry="2" />
<text  x="2263.36" y="95.5" >std:..</text>
</g>
<g >
<title>std::ctype&lt;char&gt; const&amp; std::use_facet&lt;std::ctype&lt;char&gt; &gt;(std::locale const&amp;) (47 samples, 0.53%)</title><rect x="273.1" y="261" width="31.4" height="15.0" fill="rgb(221,173,8)" rx="2" ry="2" />
<text  x="276.06" y="271.5" >st..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (27 samples, 0.30%)</title><rect x="1425.7" y="261" width="18.1" height="15.0" fill="rgb(242,211,46)" rx="2" ry="2" />
<text  x="1428.68" y="271.5" ></text>
</g>
</g>
</svg>
